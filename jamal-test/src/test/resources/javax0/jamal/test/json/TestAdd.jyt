"you can add a map structure with a key to the root of the structure":
  Input: |-
    {@json:define a= {"a": "this is a", "b": "this is b"}}\
    {@json:add to=a key=c
      {"a": "this is a",   "b": "this is b"}
    }{a}
  Output: |-
    {"a":"this is a","b":"this is b","c":{"a":"this is a","b":"this is b"}}

you can add a list to the root element of the structure:
  Input: |-
    {@json:define a=["a", "b"]}\
    {@json:add to=a
    "c"}\
    {@json:add to=a
    "d"}\
    {a}\
  Output: |-
    ["a","b","c","d"]

add a new element with a key to a map:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": {}}}\
    {@json:add to=a./c key=huppa
    "abraka dabra"}\
    {a}
  Output: |-
    {"a":"this is a","b":"this is b","c":{"huppa":"abraka dabra"}}

you must not specify a key when using flatten to merge a map into another:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": {}}}\
    {@json:add to=a./c key=huppa flatten
    "abraka dabra"
    }\
    {a}
  Throws: "You cannot 'json:add' with a 'key' parameter when flattening for 'a\\./c'"

add a map merged into the other:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": {}}}\
    {@json:add to=a./c flat
    {huppa: "abraka dabra",  muppa: "abraka kadarka vinoe"}}\
    {a}
  Output: |-
    {"a":"this is a","b":"this is b","c":{"huppa":"abraka dabra","muppa":"abraka kadarka vinoe"}}

you cannot add a list flattened into a map:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": {}}}\
    {@json:add to=a./c flat
    - huppa: "abraka dabra"
    - muppa: "abraka kadarka vinoe"
    }
    {a}
  Throws: "You can add only a Map to a Map when .*"

you can add elements to a list:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": []}}\
    {@json:add to=a./c
    "this is c first"}\
    {@json:add to=a./c
    this is c second}\
    {a}
  Output: |-
    {"a":"this is a","b":"this is b","c":["this is c first","this is c second"]}

you can add list to a list appending:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": []}}\
    {@json:add to=a./c flat
     [this is c first, this is c second]}\
    {a}
  Output: |-
    {"a":"this is a","b":"this is b","c":["this is c first","this is c second"]}

you can not append a map to a list:
  Input: |-
    { @json:define a={ a:"this is a","b": "this is b","c": [ ] } }\
    {@json:add to=a./c flat
      { karoly: this is c first, miroslava: this is c second}}{a}
  Throws: "You can add only a List to a List when flat.*"

you cannot add a value to a map without key:
  Input: |-
    {@json:define a={a:"this is a","b":"this is b","c": []}}\
    {@json:add to=a
    this is c first
    }
  Throws: "You cannot 'json:add' without a 'key' parameter to a Map for.*"

you cannot append anything to a list when you specify a key:
  Input: |-
    {@json:define a=[a,b,c]}\
    {@json:add to=a key=birca
    this is not added
    }
  Throws: "You cannot 'json:add' with a 'key' parameter to a List for .*"

you cannot add something to a string:
  Input: |-
    {@json:define a={"a":"this is a"}}
    {@json:add to=a./a key=birca
    "this is c first"
    }
  Throws: |-
    You can 'json:add' only to a List or Map for 'a./a'
    The actual class is class java.lang.String.*

you cannot add anything to a non existent part (null) of a map:
  Input: |-
    {@json:define a={"a":"this is a"}}
    {@json:add to=a./zuppa key=birca
    this is c first
    }
  Throws: "Cannot 'json:add' into the JSON expression 'a./zuppa'"

you cannot add anything to a non existent part (null) of a list:
  Input: |-
    {@json:define a=[this is a]}
    {@json:add to=a./zuppa key=birca
    this is c first
    }"
  Throws: "Cannot 'json:add' into the JSON expression 'a./zuppa'"

you get error when the JSON expression is erroneous:
  Input: |-
    {@json:define a=[this is a]}
    {@json:add to=a./zuppa!hh key=birca
    this is c first
    }
  Throws: Cannot 'json:add' into the JSON expression 'a./zuppa!hh'

you get error when the json if malformed:
  Input: |-
    {@json:define a=[this is a]}
    {@json:add to=a
    {- khmm
    z: 2
    this is c first}}
  Throws: "Cannot load JSON data."