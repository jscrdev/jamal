macro named 'default' is invoked when defined instead of undefined error:
  Input: "{@define default=wupppps...}{something}"
  Output: "wupppps..."

Incomplete user defined macro definition throws exception:
  Input: "{@define z wupppps...}"
  Throws: "define 'z' has no '=' to body"

macro named 'default' is invoked when defined instead of zero string when macro used optionally:
  Input: "{@define default=wupppps...}{?something}"
  Output: "wupppps..."

simplest ever define and use user-defined macro:
  Input: "{@define a=wupppps...}{a}"
  Output: "wupppps..."

macros can be redefined:
  Input: "{@define a=y}{@define a=x}{a}"
  Output: "x"

macros can be redefined conditionally, and are not redefined if already defined:
  Input: "{@define a=y}{@define ? a=x}{a}"
  Output: "y"

macro redefinition can result error in case we use !:
  Input: "{@define a=y}{@define ! a=x}{a}"
  Throws: "The macro 'a' was already defined."

conditional redefinition does not redefine any higher scope already defined macro:
  Input: "{#ident {@define :a=y}}{@define ? a=x}{a}"
  Output: "y"

"last character of a macro can be ':' colon":
  Input: "{#ident {@define a:()=y}}{a:}"
  Output: "y"

"when {@define a:=y} actually defines a and not a: because it is a := and not a: =":
  Input: "{@define a:=y}{a}"
  Output: "y"

"you can define a macro with := when it has parameters":
  Input: "{@define a(z):=yz}{a Z}"
  Output: "yZ"

"Using := to define a macro will freeze the opening and closing strings in the macro when used":
  Input: "{@define a(z):={yz}}{@define yZ=k}{@sep [ ]}[a Z]"
  Output: "{yZ}"

"Using = to define a macro will replace the macros in the macro even if the opening/closing string is already different":
  Input: "{@define a(z)={yz}}{@define yZ=k}{@sep [ ]}[a Z]"
  Output: "k"
