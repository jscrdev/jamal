{%@comment

 This test demonstrates that the macro argument separation works along multiple level and the macros that are nested and
 used as actual parameters for the current user defined macro can use the same separator character. In the example
 below the definition of the macro `z`

 {#define z={a /{@ident {b/X/Y/Z}}/H/K}}

 first evaluates `a`. It will have three argument:

      1. {@ident {b/X/Y/Z}}  <-- this was protected by two {@ident ...} macros. When the body of `a` was evaluated, it
                                 became {@ident {b/X/Y/Z}} and when the result of the evaluation of `a` was evaluated
                                 it became {b/X/Y/Z}. At this point `b` is not defined yet.
      2. H and
      3. K

 When `z` is evaluated it becomes

    {b/X/Y/Z} .. H .. K

 and then the result of `z` is evaluated again and at this point it becomes

    X -- Y -- Z .. H .. K

 (Read the documentation of the macro `verbatim` in the README.md file!)

%}
{%@yaml:string testInput=
{@define a(x,y,z)= x .. y .. z}
{#define z={a -{@ident {@ident {b-X-Y-Z}}}-H-K}}
{@define b(x,y,z)= x -- y -- z}{z}
{@comment
 When we evaluate the macro `p` it has three arguments:

 * `{q/a/b/c}`
 * `{q/x/y/z}` and
 * ` wuff wuff`

the macro body is split up to arguments and then the individual arguments are evaluated. After this evaluation the
arguments become

 * `a/b/c`
 * `x/y/z` and
 * ` wuff wuff`

and thus the final result is

 * `a/b/cx/y/z wuff wuff`

}{@define p(a,b,c)=abc}
{@define q(a,b,c)=a/b/c}
{p/{q/a/b/c}/{q/x/y/z}/ wuff wuff}
%}
{%@yaml:string testOutput=


  X -- Y -- Z .. H .. K


a/b/cx/y/z wuff wuff
%}

{%#yaml:define test=
macro nesting on different level:
  Input: {%@yaml:ref testInput%}
  Output: {%@yaml:ref testOutput%}
%}
{%@yaml:output test%}