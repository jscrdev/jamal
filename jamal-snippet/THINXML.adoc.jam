== Thin XML Format
{%@snip:check file=./src/main/java/javax0/jamal/snippet/ThinXml.java hash="c1bb6569"%}
{%@import res:jamal.jim%}\
{%@define sample(code)={%#define :lastCode={@xmlFormat (thin)}
code%}[source]
{%@comment%}----
{%#trimLines
code%}
----%}
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

== Introduction

Thin XML is a format mapped to XML effortlessly and straightforwardly, but it contains fewer characters and is more readable.
The thin XML format lets you leave the closing tags.
Instead of the closing tags, it introduces positioning.

It is somewhat similar to what the Python language is doing compared to other languages.
Many languages use explicit closing for complex constructs, like adding a `}` to the end of a block or using the `end` keyword.
Python starts to write with the previous indentation following a block.

Thin XML does the same.
To ease understanding here is a simple example:

{%sample/
project>
  modelVersion>4.0.0
  name>jamal snippet
  packaging>jar
  groupId>com.javax0.jamal
  artifactId>jamal-snippet
  version>{%VERSION%}
  parent>
    groupId>com.javax0.jamal
    artifactId>jamal-parent
    version>{%VERSION%}
    relativePath>../jamal-parent
%}

It is the same as the standard XML in the following way:

{%output%}

The tags `modelVersion`, `name`, and so on are all tabbed deeper than `project`; thus, they are tags inside the `project` tag.
The `parent` also has children, which are tabbed deeper.

== Thin XML Tabbing

The tabbing can go back and forth many times.
If we move the `groupId`, `artifactId`, and `version` tags to follow the `parent` tag, but with the same tab depth:

{%sample/
project>
  modelVersion>4.0.0
  name>jamal snippet
  packaging>jar
  parent>
    groupId>com.javax0.jamal
    artifactId>jamal-parent
    version>{%VERSION%}
    relativePath>../jamal-parent
  groupId>com.javax0.jamal
  artifactId>jamal-snippet
  version>{%VERSION%}
%}

we get the following:

{%output%}

The XML text, like the `4.0.0` model version, can be on the same line as the tag, following it, or on the following lines.

{%sample/
project>
  modelVersion>4.0.0
  name>jamal snippet
  packaging>jar
  description>
    The snippet library for the jamal language.
    It also contains the xmlFormat macro that can convert from thin XML to regular XML.
  parent>
    groupId>com.javax0.jamal
    artifactId>jamal-parent
    version>{%VERSION%}
    relativePath>../jamal-parent
  groupId>com.javax0.jamal
  artifactId>jamal-snippet
  version>{%VERSION%}
%}

we get the following:

{%output%}

It is essential that the tabulation, even, in this case, has to be the same.
Making a mistake and starting the text too much to the left will close the tag.

{%sample/
project>
  packaging>jar
  description>
    The snippet library for the jamal language.
 Misaligned text closes the tag.
  parent>
    groupId>com.javax0.jamal
    description>
      The parent library for the jamal language.
 This misplaced text will close the parent tag also.
    relativePath>../jamal-parent
  groupId>com.javax0.jamal
  artifactId>jamal-snippet
  version>{%VERSION%}
%}

will be

{%output%}

When you place more than one tag on a single line the tabbing counts only for the first one.
For example:

{%sample/
project>
  films>film id="goldfinger">girls>
    girl id="Pussy Galore">
      year>1925
    girl id="Jill Masterton">
      year>1937
    girl id="Tilly Masterson">
      year>1941
%}

will result in:

{%output%}

Even though the `girl` tags are on a column left to the start of the `girls` or `film` tags, the tabbing counts only for the first one.
The tags that are on the same line inherit the tag positions of the first tag on the line.

This way, you cannot insert more than one `film` tags following the joined line.
To do that you have to split the opening line into separate lines.

{%sample/
project>
  films>
    film id="goldfinger">
      girls>
        girl id="Pussy Galore">
          year>1925
        girl id="Jill Masterton">
          year>1937
        girl id="Tilly Masterson">
          year>1941
    film id="casino royale">girls>
      girl id="Vesper Lynd">
        year>1923
%}

will result in:

{%output%}

== Attributes

The tags in thin XML can also have attributes.
Attributes can be written with `"` separators only.
The `'` character is not allowed as a separator.
If the attribute value does not have space, then the `"` around the value is optional.

{%sample/
project name="prohibited" note="real POM XML does not have attributes">
    packaging>jar
    description format=plain>
     Just some dummy description
  parent>
    groupId value="com.java0.jamal">
  groupId>com.javax0.jamal
  artifactId>jamal-snippet
  version>{%VERSION%}
%}

All the tags will have attributes surrounded with `"` characters in the output.

{%output%}

== XML tags in Thin XML

You can also include regular XML tags into think XML.
You can manage the file even if the tabbing would otherwise go excessive.
For example, the following example has gone with tabbing a bit too far to the right:

{%sample/
project>
       modelVersion>4.0.0
       name>jamal snippet
       packaging>jar
       profiles>profile>
                  id>release
                  build>plugins>plugin>
                                    groupId>org.apache.maven.plugins
                                    artifactId>maven-gpg-plugin
                                    version>3.0.1
                                    executions>execution>
                                                 id>sign-artifacts
                                                 phase>verify
                                                 goals>goal>sign
%}

It is still correct and works as expected:

{%output%}

This example does not achieve the original aim of thin XML to have readable and straightforward XML structured data.
This can be amended including normal XML tags into think XML:

{%sample/
project>
       modelVersion>4.0.0
       name>jamal snippet
       packaging>jar
       profiles>profile>
                  id>release
                  build>plugins>
         <plugin>
           groupId>org.apache.maven.plugins
           artifactId>maven-gpg-plugin
           version>3.0.1
           executions>execution>
                        id>sign-artifacts
                        phase>verify
                        goals>goal>sign
         </plugin>
%}

It will result in the same as the previous example:

{%output%}

The tabulation of the XML part is not essential and is generally ignored.
After an opening XML tag, the thin XML tabbing is reset and gets back to the previous level after the closing XML tag.
It can start to the left of the previous tags; the already opened tags will not be closed.
The only important rule is that you should align the thin XML inside the opening and closing tags.

The opened XML tag has to be closed with the closing tag.
There is no shorthand for that.

You can embed XML into the thin XML and thin XML into the XML into any level deep.
For example the previous example can also be written as:

{%sample/
project>
       modelVersion>4.0.0
       name>jamal snippet
       packaging>jar
       profiles>profile>
                  id>release
                  build>plugins>
         <plugin>
           groupId>org.apache.maven.plugins
           artifactId>maven-gpg-plugin
           version>3.0.1
           executions>
                            <execution>
   id>sign-artifacts
   phase>verify
   goals>goal>sign
           </execution>
         </plugin>
%}

and it still gets the same output:

{%output%}

== CDATA

Thin XML can contain CDATA sections.
A CDATA section should start on a separate line and should end on its own line.
The start of the CDATA section is any line that starts with `<![CDATA[`.
Then end of the section is the line that ends with `]]>`.

{%sample/
project>
     name>jamal snippet
     <![CDATA[ you can have text already here
content verbatim    anything can come here <>!
and finally something else]]>
     packaging>super
%}

is representing the XML

{%output%}

The position of the `<![CDATA[` controls which tags are closed before the CDATA section.
In the example above the CDATA section closes the `name` tag, as it appears on the same tabbing level.
If we increase the tabbing it does not close the `name` tag.

{%sample/
project>
    name>jamal snippet
     <![CDATA[ you can have text already here
content verbatim    anything can come here <>!
and finally something else]]>
    packaging>super
%}

will result in the following output:

{%output%}


== Implementation

The thin XML converter is implemented in the Jamal Snippet module and can be used with the macro `xmlFormat`.
The primary purpose of developing thin XML was to support Maven POM shortening while keeping it strictly XML.
You can use the Jamal Maven extension (not a plugin!) to instruct Maven to locate and parse the POM via the extension.
