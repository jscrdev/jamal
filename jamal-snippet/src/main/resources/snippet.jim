{@comment this file defines user defined macros that help the use of the built-in snippet macros}

{@define java:class:simpleName($x)={#java:class {@define classFormat=$simpleName}$x}}
{@define java:class:canonicalName($x)={#java:class {@define classFormat=$canonicalName}$x}}
{@define java:class:name($x)={#java:class {@define classFormat=$name}$x}}
{@define java:class:packageName($x)={#java:class {@define classFormat=$packageName}$x}}
{@define java:class:typeName($x)={#java:class {@define classFormat=$typeName}$x}}

{@define java:method:name($x)={#java:method {@define methodFormat=$name}$x}}
{@define java:method:classSimpleName($x)={#java:method {@define methodFormat=$classSimpleName}$x}}
{@define java:method:className($x)={#java:class {@define methodFormat=$className}$x}}
{@define java:method:classCanonicalName($x)={#java:method {@define methodFormat=$classCanonicalName}$x}}
{@define java:method:classTypeName($x)={#java:method {@define methodFormat=$classTypeName}$x}}
{@define java:method:packageName($x)={#java:method {@define methodFormat=$packageName}$x}}
{@define java:method:typeClass($x)={#java:method {@define methodFormat=$typeClass}$x}}
{@define java:method:exceptions($x)={#java:method {@define methodFormat=$exceptions}$x}}
{@define java:method:parameterTypes($x)={#java:method {@define methodFormat=$parameterTypes}$x}}
{@define java:method:parameterCount($x)={#java:method {@define methodFormat=$parameterCount}$x}}
{@define java:method:modifiers($x)={#java:method {@define methodFormat=$modifiers}$x}}

{@define chop($x)={@options regex}{@replace /$x/.$//}}

{@define java:method:parameterTypes:simpleName($x)={chop /{!#for $z in ({java:method:parameterTypes /$x})={`java:class:simpleName $z},}}}
{@define java:method:exceptions:simpleName($x)={chop /{!#for $z in ({java:method:exceptions /$x})={`java:class:simpleName $z},}}}

This macro can be used to include documentation from a program source file.
The macro argument has to be the file included with the option [verbatim].
The macro selects the lines that start a snippet and creates a list from the snippet names.
When it is done it iterates through the snippet names and calls the `snip` macro to include the snippets.

NOTE: It is not enough to use this macro, the snippets should also be collected from the file!

When the text of all these snippets are put together then it evaluates the resulting text.
That way the snippets can act as normal documentation content.
They will be included into the documentation and all the macros and everything will be usable there.

The snippets are concatenated in the order as they present in the source file.
They are evaluated as one text block, therefore any macro defined in one snippet is also available in the later snippets.

{@define docFrom($file)=
{!#for [skipEmpty] $snippet in ({#replace (regex) /
{#replaceLines replace="/^.*snippet\\s+(\\w+).*$/$1,/"
{#killLines keep pattern="^.*snippet\\s+\\w+.*$"
$file}}/(\w)\n(\w)/$1,$2/\n//})={@ident {#eval/jamal {@snip $snippet}}
}}}
