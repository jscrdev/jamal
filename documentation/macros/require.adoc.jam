{%@import macrodoc.jim%}
{%MACRO name="require" since=1.6.4%}
{%@snip:xml pom=../../pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

== Syntax

{%sample/
{@require [<|>|<=|>=|=] version }
%}

It requires that the running version of Jamal is greater than or equal to the specified version.

== Description

The evaluation of this built-in macro will check that the currently running version of Jamal is

* less-than

* greater-than

* lees-then or equal

* greater than or equal, or

* equal

to/than the version specified after the comparison sign.
The use of the comparison sign is optional.
The default comparison is greater than or equal.

If the comparison fails, the evaluation of the macro will result in an error.
If the current version matches the requirement, then the result of the macro is an empty string.

For example:

{%sample/
{@try!{@require 6666.5.3}}
%}

will result

{%output%}

You can specify only one version in a `require` macro.
If you want to specify a minimum and a maximum version, you should use two `require` macros.

Using a version before `1.6.4` in the `require` argument is an error.

Starting with version `{%RELEASE:BUDAPEST%}` you can use the alias `version` for this macro.
With this release, if you use the macro without any argument, it will result in the current version.
For example

{%sample/
This documentation was processed using the version {@version}
%}

will result in

{%output%}

NOTE: In the documentation of Jamal (this document and other modules) we do not use this macro.
The documentation is about the version of Jamal, which is the source code and not the one running.
They may be different.
The version of the documented code is in the `pom.xml` file: `{%VERSION%}`.
