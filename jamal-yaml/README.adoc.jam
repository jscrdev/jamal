= Jamal Yaml integration module

{%@import res:jamal.jim%}
{%#counter:define id=macroChapter {%@define format=$roman. %}%}
{%@snip:collect from=src/main/java%}
Using this integration module, you can mix Jamal macro text with YAML data.
To use this module, you have to add the dependency to your Maven project, as:
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>jamal-yaml</artifactId>
    <version>{%VERSION%}</version>
</dependency>
----

Following that, you can use the
{%@define chap($x)=. <<$x,`yaml:$x`>>%}{%@define ImportingChapter=Importing yaml from a file%}

{%chap define%}
{%chap ref%}
{%chap resolve%}
. <<import,{%ImportingChapter%}>>
{%chap isResolved%}
{%chap get%}
{%chap add%}
{%chap format%}
{%chap dump%}
{%chap xml%}
{%chap output%}

{%@define chap($x)=[[$x]]
=== {%macroChapter%}`yaml:$x`
%}{%@define link($x)=<<$x,`yaml:$x`>>%}
macros.

== Macros implemented in the package

{%chap define%}
since 1.7.5 `?` and `!` macro redefinition control

You can use this macro to define a Yaml structure.
The format of the macro is

[source]
----
{@yaml:define yamlMacro=
tabulated Yaml content
}
----

After that, the name `yamlMacro` will be defined as a user-defined macro and can be used as `{yamlMacro}` without argument.
The value will replace the place of the use with the actual Yaml content.

NOTE: Internally, Jamal converts the Yaml read in an object structure consisting of strings, primitives, maps, and lists.
The structure is stored in an object of the type {%@java:class (format=`$simpleName`) javax0.jamal.yaml.YamlObject%}.
This class technically is a user-defined macro.
The `yaml:define` macro will register the structure among the user-defined macros.
When the name is used the same way as any other user-defined macro (without any argument), the content of the Yaml structure is converted to text.

The `yamlMacro` is stored along with the "usual" user-defined macros.
Any usual or other user-defined macro can be redefined any number of times.
If you want to define a Yaml macro only if it was not defined prior, use the `?` after the keyword `yaml:define`.
If you want to get an error message if the macro was already defined, use the `!` after the keyword `yaml:define`.
This functionality is implemented the same way as it is for the core built-in macro `define`.

The example:

{%sample/
{@yaml:define xyz=
a: this is the string value of a
b:
  - first value of b
  - second value in b
c:
  a: this is c.a
  b: this is c.b
}\
{xyz}
%}

will result

{%output%}

The advantage of using this macro over just writing the Yaml directly to the output is that:

* you can split up the Yaml file into smaller pieces using the {%link ref%}, and {%link resolve%} macros,

* you can use user-defined macro parameters mixing the yaml content with Jamal macros.

Many times Yaml structures become profoundly nested, and it is not trivial to move things around.
The Yaml structure is a data description structure, and many times these data structures are redundant.
When editing Yaml structures, it is common to copy some part of the structure and edit its art.
Using Jamal, you can solve the indentation hell as well as you can reduce the poisonous redundancy.
Utilizing user-defined macros, you can use macros inside Yaml code, and at the same time, you can use Yaml code inside the macros.
That way, you can pull out the part, repeat, and use only the macro as a reference.

It is a solution for strings and parts of some strings used at multiple locations in the Yaml file.
User-defined macros alone do not solve the problem of overcomplexity and deep tabulation.

The Jamal Yaml module allows you to have a partially defined Yaml file to overcome this problem.
When a Yaml structure is read from the text representation, it is stored in the memory as a Java object structure.
It utilizes primitive values, strings, lists, and maps.
In addition to that, you can also use

[source,yaml]
----
!!java.class.Name value
----

type of values that will tell the Yaml reader to create a value stored in an object of the class `java.class.Name`.
It can only be used when the specified class is on the classpath, and it is rarely used in general Yaml.
There is a particular class in the `javax0.jamal.api` package, called `Ref`.
When you specify a value

[source,yaml]
----
!!javax0.jamal.api.Ref xyz
----

it will create a `new Ref(xyz)` object.
Jamal will interpret this object as a reference to another Yaml data structure stored as a user-defined macro with the name `xyz`.
When you specify the Yaml structure, the user-defined macro `xyz` does not need to be defined yet.
It may be defined, but it may also be defined later.
What is more, the macro can also be the same as the one that contains it.
These references can be recursive.

The example:
{%sample/
{#yaml:define b=- x
- y
- {@yaml:ref a}}
{@yaml:define a=[a,b,c]}
{b}
%}

results

{%output%}

You can also write this example as

{%sample/
{@yaml:define b=- x
- y
- !!javax0.jamal.api.Ref a}{@comment DON'T DO THIS!}
{@yaml:define a=[a,b,c]}
{b}
%}

resulting in the same output

{%output%}

NOTE: You can notice that the macro `a` referenced from `b` is defined later than `b`.

Having these references with Jamal specific class types is of no general use.
Their value is that Jamal can resolve them by converting the references to the content of the named macro.
When you invoke the built-in macro `yaml:resolve`, these references will be replaced with their actual value.

The same example as above, but resolving the Yaml macro before using it

{%sample/
{#yaml:define b=- x
- y
- {@yaml:ref a}}
{@yaml:define a=[a,b,c]}
{@yaml:resolve b}
{b}
%}

will result

{%output%}

When you invoke `yaml:resolve`, all the referenced Yaml macros have to be defined.

Using this reference possibility, you can have several small Yaml fragments possibly referencing each others using the `!!javax0.jamal.api.Ref`.
When the small segments are done, you can apply `yaml:resolve` on the root one and create the output.

[NOTE]
====
When processing Yaml input, you can use the `{` and `}` characters as macro opening and macro closing strings.
When you edit a Yaml file, you do not usually use the JSON-compatible `{ ... }` format for mapped values.
However, when you use a user-defined, named Yaml content, like `{yamlMacro}`, it is likely to happen that the underlying rendering will generate a textual representation of the Yaml data, which contains `{` and `}` characters.
The values of the user-defined macros are evaluated after they were dereferenced.
The Yaml macros are exempt from this.
These user defined macros are defined verbatim, like a normal user defined macro was defined using the `~` character after the `define` keyword.
The evaluation is not needed because Yaml data hardly ever contain Jamal macros to be processed.
The `{` and `}` characters may also cause a problem for Jamal.
Precisely, it would interpret the first identifier following the `{` character as a user-defined macro.
It will not find it.
Even if it found it, it would not likely to properly evaluate.

One solution to this problem is to use a different opening and closing string that does not appear inside the Yaml output.
If you can find one for your application, you can go for it.
Usually, you cannot guarantee that none of the string fields will contain the macro opening string.
The safe solution is that these macros are defined my the Yaml built-in macros as verbatim.
If you need to evaluate the content of the Yaml structure with embedded macros you have to use the `{!yamlMacro}` format.

For more information on macro evaluation order, see the core documentation of Jamal.
====

{%chap ref%}

Use this macro to reference another Yaml definition.
The implementation of a reference is an object, instance of the class {%@java:class (format=`$name`) javax0.jamal.api.Ref%}.
It, however, is a Java-specific way.
You can reference another user defined Yaml definition in the form:

{%sample/
{@yaml:define x=
a: this is a string
b: !!javax0.jamal.api.Ref xyz}
%}

It is more readable if you write:

{%sample/
{#yaml:define x=
a: this is a string
b: {@yaml:ref xyz}}
%}

NOTE: In this case, the `{\#yaml:define...}` macro starts with the `#` character because the macro `{@yaml:ref...}`, inside it, has to be evaluated.

There is no guarantee that the implementation to reference another named, user-defined Yaml fragment will be compatible with the current implementation.
Using the `yaml:ref` macro is the safe approach because it will always generate the Yaml reference sequence recognized by `yaml:resolve`.

{%chap resolve%}

Use this macro to resolve one or more user-defined Yaml macro.

The format of the macro is

{%sample/{@yaml:resolve macroName1, macroName2, ..., macroNameX}%}


User-defined Yaml macros created using the {%link define%} or {%link import%} macros may reference other user-defined Yaml macros.
When you invoke the macro `yaml:resolve`, it will replace the references in the Yaml macro content with the content of the Yaml macro it references.
The resolving process is recursive.
If there are any references in the referenced Yaml macro, it will also be resolved.
After resolving a macro `xyz` that references the macro `aqt`, the macro `aqt` will also be resolved.
In some rare cases, this should not happen.
If the referenced Yaml macros should not de resolved, then the option `yamlReferenceClone` should be set using the macro `{@option yamlReferenceClone}`.
This option also has a local parameter alias, `clone`, that can be used between `(` and `)` as a macro option.

The example

{%sample/
{@yaml:define a=[ a, b ,c ]}
{#yaml:define aqt=z: {@yaml:ref a}}
{#yaml:define xyz=
a: 1
b: 3
c: {@yaml:ref aqt}}
{@yaml:resolve (clone) xyz}
Resolved:
{xyz}
Not resolved:
{aqt}
%}

will result

{%output%}

This process will not change the value of the macro `aqt`.
In this case, the resolving process will create a copy of the referenced macro, and it will resolve the copy recursively.
That way, `xyz` is still fully resolved and ready to be used.

The same example doing the resolve without the `clone` option, however

{%sample/
{@yaml:define a=[ a, b ,c ]}
{#yaml:define aqt=z: {@yaml:ref a}}
{#yaml:define xyz=
a: 1
b: 3
c: {@yaml:ref aqt}}
{@yaml:resolve xyz}
Resolved:
{xyz}
Also resolved:
{aqt}
%}

will result

{%output%}

NOTE: When a macro is resolved, it will remember that it was already resolved and will not execute the resolve process anymore.
It also means that calling `yaml:resolve` with the `clone` option on `xyz` and then calling it again without it will not resolve the referenced `aqt`.
Unless you have a specific need, use the `yaml:resolve` macro without cloning.

There is another option that alters the behaviour of the resolving process.
This is `yamlResolveCopy` with the alias `copy`.
This option creates a copy of the referenced structures, cloned or not.
To understand this we can have a look at the following example:

{%sample/
{@yaml:define a=[ a, b ,c ]}
{#yaml:define aqt=z: {@yaml:ref a}
y: {@yaml:ref a}
}
{@yaml:resolve aqt}
{aqt}
%}

will result

{%output%}

When the underlying Snake Yaml library generates the text format of the Yaml data it realizes that both `z` and `y` fields refer to the same object.
Thus SnakeYaml generates a label, something like `&id001` at the first occurrence and instead of repeating the same structure it on second occasion it only references that as `*id001`.
The resolving process can circumvent this creating a copy for every reference.

{%sample/
{@yaml:define a=[ a, b ,c ]}
{#yaml:define aqt=z: {@yaml:ref a}
y: {@yaml:ref a}
}
{@yaml:resolve (copy) aqt}
{aqt}
%}

will result

{%output%}

Note that `copy` and `clone` are not the same.
You can use the `clone` option together or without `copy` and also the other way around.
The implementation of copy resolution can handle recursive data structures and it will generate references into the output.

For example

{%sample/
{#yaml:define a=[ a, b ,c, {@yaml:ref a}]}
{@yaml:resolve (copy clone) a}
{a}
%}

works as expected

{%output%}

However, when trying to resolve the following:

{%sample/
{#yaml:define a=[ a, b ,c, {@yaml:ref a}, {@yaml:ref a}]}
{@try! {@yaml:resolve (copy clone) a}}
{a}
%}

then the result is

{%output%}

Here we got an error message from the macro `try`, and the Yaml structure stored in `a` remained unresolved.

[[Import]]
==== {%macroChapter%}{%ImportingChapter%}

There is no import macro to read Yaml formatted data from a file.
If you want to read data from a file, you should combine the `yaml:define` and the core `include` macros.
For example, there is a resource file {%@file (format=`$name`) src/test/resources/sample.yaml%} in the project where this documentation is compiled.
It ren be referenced from the test execution, which also converts this document as `res:sample.yaml`.
The content of this file is

{%sample/
{%@include [verbatim] res:sample.yaml%}%}

You can use the following structure to read it from the file and assign the Yaml data to the macro `aqt`:

{%sample/
{#yaml:define aqt={@include [verbatim] res:sample.yaml}}
{aqt}
%}

which will result

{%output%}

The file has to be a Yaml formatted file, and it should not contain any Jamal macro.
(If it does, it will be treated as raw data and will not be macro processed by Jamal.)
If you want to read a Jamal formatted Yaml file, you must include it using the core `include` macro without the `[verbatim]` option.

NOTE: The built-in core macros use the `[` and `]` characters to enclose the options.
Other packages usually use `(` and `)`.

The file {%@file (format=`$name`) src/test/resources/sample.yaml.jam%} contains Jamal macros:

{%sample/
{%@include [verbatim]res:sample.yaml.jam%}
%}

You can include it with evaluation using the following macro sequence.

{%sample/
{@define a=wuff wuff}
{#yaml:define h={@include res:sample.yaml.jam}}
{h}
%}

which will result:

{%output%}

{%chap isResolved%}

The macro `yaml:isResolved` results `true` or `false` if the Yaml macro given as argument is eihter resolved or not.
The syntax of the macro is

{%sample/
{@yaml:isResolved macro_name}
%}

Example:

{%sample/
{@yaml:define a=
a: this is a
b: this is b
}
{@yaml:isResolved a}
{@yaml:resolve a}\
{@yaml:isResolved a}
%}

results

{%output%}

Note that the example Yaml structure does not need resolution.
This macro does not test the structure.
It simply tells that the structure went through the resolve process or not.

Usually there is narrow use of this macro.
There is no penalty invoking {%link resolve%} on a structure that was already resolved.
The macro resolve does not re-run the resolution process for a structure that was already resolved.
Other macros that need resolved structures automatically invoke resolving.

{%chap get%}

This macro will fetch one value from a Yaml structure.
This can be useful when you want to document some configuration or other data structure that is present as a Yaml file in your project.
In that case you can import the Yaml structure into your Jamal document and refer individual values in it.
The format of the macro is:

{%sample/
{@yaml:get (from=yamlMacro) OGNL-PATH}
%}

The option `from` names a Yaml user defined macro, where the Yaml structure was loaded.
It can also be defined outside as a user defined macro of the name `yamlDataSource`.
This is useful when you want to retrieve multiple values from the same data structure.

The `OGNL-PATH` is a Object Graph Navigation Library Path.
The functionality to fetch a value is implemented using the Apache Commons OGNL library.
For more information about the OGNL language visit the web site https://commons.apache.org/proper/commons-ognl/index.html.

When getting a value out of a Yaml user defined macro the macro will automatically be resolved.
The resolution can be cloning or in-place.
To control the resolution process the same options can be used as for the {%link resolve%} macro.

===== Examples

{%sample/
{@yaml:define a=
a: alma
b:
  c: 3
  d:
    - 1
    - 2
    - q:
        h: deep h}
{@yaml:get (from=a) b.d[2].q.h}
%}

will result

{%output%}

{%chap add%}

The macro `yaml:add` can modify an already parsed Yaml data structure.
You can add elements to lists or maps inside the Yaml structure.
The syntax of the macro is

{%sample/
{@yaml:add options
yaml data structure
}
%}

The yaml data structure is the textual representation of the Yaml data to be hooked on the already existing data structure.
The options present on the same line as the macro keyword `yaml:add` and the yaml data structure starts on the second line.
The possible options are:

* `yamlDataTarget` (alias `to`) must be specified and should define the point where the new data structure is added.
The keyword `yamlDataTarget` can also be a user defined macro.
The alias `to` can only be used in the macro use.
Using `yamlDataTarget` defined as a user-defined macro makes sense when there are several additions to the same point.
The format of the option is `macroName.ognl expression`.
The name of the macro that holds the current data structure to be modified is at the start of the `to` string.
It is separated by a `.` dot character from the Ognl expression that identifies the part of the structure to be modified.
If there is no `.` in this parameter then the root of the structure is used.

* `key` should only be specified when adding new data to a `Map`.
The value of this option will be the key used in the `Map`.
If data with the key already exists it will be overwritten.
It is an error to specify a `key` when adding value to a data point, which is a list.

* `flat` or `flatten` will decompose the Yaml structure before adding to the data point in the original yaml.
Adding values to a `Map` then the top level of the Yaml structure to be added also has to be `Map`.
Adding values to a `List` then the top level of the Yaml structure to be added also has to be `List`.
Adding a `Map` this way the key value pairs of the map will be added to the original Yaml map.
Adding a `List` this way the values of the list will be appended to the original Yaml list.
When this option is specified it is an error to specify any `key` since in this case the keys of the map will be used.

==== Examples

===== Adding a value to the top level Map

This example adds a new value to the root of the Yaml structure.

{%sample/
{@yaml:define a=
a: this is a simple Yaml with a top level Map
}
{@yaml:add to=a key=b
this is the value to be added to yaml structure a
}
{a}
%}

will result:

{%output%}

===== Adding element to a Map in the Yaml structure

In this example the value is added to the value of the map from the top level named `b`.

{%sample/
{@yaml:define a=
a: this is a simple Yaml with a top level Map
b: {}
}
{@yaml:add to=a.b key=c
this is the value to be added to yaml structure a
}
{a}
%}

will result:

{%output%}

===== Using flat to add multiple elements to a Map

This example will add multiple elements to a map inside the yaml structure.

{%sample/
{@yaml:define docker=
version: "3.6"
services:
  jamal-mongodb:
    build:
      args:
        dump_dir: dump
      context: ./config-dev/mongodb
    container_name: zrch-mongodb
    environment:
      - TZ=Europe/Zurich
    image: zrch/mongodb:1.0.1-dev
    labels:
      com.javax0.jamal.description: "Persistence service."
      com.javax0.jamal.is-production: "false"
    ports:
      - "27017:27017"
}
{@yaml:add to=docker.services["jamal-mongodb"].labels flat
com.javax0.jamal.title: "Non-relational DB Instance"
com.javax0.jamal.sizing: 1000
com.javax0.jamal.nodeType: primary
}
{docker}
%}

will result:

{%output%}

===== Adding elements to an array

This example adds one element to an array.
The added element itself is an array.
It is not flattened

{%sample/
{@yaml:define a=
- this is a simple Yaml with a top level Map
- kukuruc
}
{@yaml:add to=a
- this is one element
- this is the second element}
{a}
%}

will result:

{%output%}

If we use flattening we get different result

{%sample/
{@yaml:define a=
- this is a simple Yaml with a top level Map
- kukuruc
}
{@yaml:format flowStyle=BLOCK}
{@yaml:add to=a flatten
- this is one element
- this is the second element
}
{a}
%}

will result:

{%output%}

{%chap format%}

This macro can be used to set the options for Snake Yaml.
The format of the macro is

{%sample/
{@format options}
%}

The options of the macro are

{%#replaceLines replace="/.*?\"(\\w+)\".*/* `$1`/"
{%@snip formatOptions%}
%}

Each of these options have a `setXXX` counterpart in SnakeYaml `DumperOption` class.
``setXXX`` methods with boolean argument need boolean option in this macro.
Similarly, methods with in argument need integer options.
Those options that have an enum `setXXX` counterpart should use the name of the individual enum values.

{%chap dump%}

The macro `yaml:dump` can dump the Yaml data structure to a file.
The format of the macro is

{%sample/
{@yaml:dump yamlMacro to file_name}
%}

where `yamlMacro` is the name of the macro that holds the Yaml data structure.
`file_name` is the name of the file where the Yaml formatted content is to be written.
The `to` separating them is a keyword to ease readability.
The following structure presents an example:

{%sample/
{@yaml:define x=[a,b,c]}
{@yaml:dump x to ./target/dump.yaml}
{@include [verbatim] ./target/dump.yaml}
%}

will result

{%output%}

There is no reason to dump an unresolved structure into a file.
If the macro to be dumped to the file was not yet resolved, it will be resolved.
The resolution process will be in-place unless the option `yamlResolveClone` (alias `clone`) is used before the name of the macro between `(` and `)` characters.

{%sample/
{@yaml:dump (clone) x to ./target/dump.yaml}
%}


{%chap xml%}

The macro `yaml:xml` results a Yaml structure in XML format.
The format of the macro is:

{%sample/
{@yaml:xml (options) yamlMacroName}
%}

Here `yamlMacroName` is the name of a Yaml macro that was defined using `yaml:define`.
Before converting the Yaml structure will be resolved in case it was not resolved yet.
For this the options `clone` and `copy ` can be specified.
For more information in these options see the macro documentation of `yaml:resolve`.

In addition to these options you can use the options

* `yamlXmlTopTag` (alias `tag`) can specify the name of the top level tag of the XML.
The default value is `xml`

* `yamlXmlAttributes` (alias `attributes`) can specify extra attributes for the top level XML tag.
The default value is not to specify any attribute for the top level tag.

Other than the top level tag the XML converted from a Yaml structure will not contain attributes.
The maps from the Yaml structure the (key,value) elements will be converted to the XML

[source,xml]
----
<key>value</key>
----

Here `value` can be another map, a list or something else represented as a string.
For example:

{%sample/
{@yaml:define z=
tagValues:
  a: 1
  b: 2
  c: 3}
{#xmlFormat {@yaml:xml (tag="tag" attributes="a=\"53\"")z}}
%}

will be converted to

{%output%}

The lists from the Yaml structure will be converted to the XML using the key value of the map containing the list.
For example the

{%sample/
{@yaml:define z=
tagValues:
- a
- b
- c}
{#xmlFormat {@yaml:xml z}}
%}

will be converted to

{%output%}

The tag names in the list is the same as the one containing the list with the last character chopped off.
The convention is that map members that contain lists should be some plural nouns having an extra 's' at the end.

If a list element is a list itself then the iterated tag value will be the same as the enclosing one chopping off another character again.
For example:

{%sample/
{@yaml:define z=
tagValues:
- a
- [x, y, z, k]
- c}
{#xmlFormat {@yaml:xml (tag=tagV)z}}
%}

will be converted to

{%output%}

There is a limitation in the Yaml structure.
Yaml structures can be recursive but XML cannot be.
In case the Yaml structure is recursive or too deep (by default {%@java:field (format=$value)javax0.jamal.engine.StackLimiter#LIMIT%}) then Jamal will stop the evaluation.

{%chap output%}

The macro `yaml:output` redefines the output of the Jamal processing.
The format of the macro is:

{%sample/
{@yaml:output yamlMacro}
%}

Here the `yamlMacro` is the name of a Yaml macro to be redered as the final output of the Jamal processing.
It has to be defined at the end of the processing.
It also means that this macro has to be on the top level in the macro hierarchy.
In other words, it has to be a global macro.

When this macro is used, the output of the Jamal processing will be the Yaml formatted structure of the data held in the macro `yamlMacro`.
If this macro contained references and was not yet resolved, then it will be resolved.
Since this is the last step processing the whole Jamal structure following the entire process, usually there is no need for cloning.
If for any reason there is need for cloning then the `clone` option may be used on the command.
The command also supports the `copy` option.
