= Jamal ScriptBasic integration module
{%@snip:collect from="src/test/java/"%}

Using this integration module you can mix Jamal macro text with ScriptBasic code snippets.
To use this module you have to add the dependency to your Maven project, as:

{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>jamal-scriptbasic</artifactId>
    <version>{%VERSION%}</version>
</dependency>

----

The library is also included in the command line version, therefore you can use the macros of this library when you process a Jamal file using the command line tools.
The same is true for the Asciidoctor preprocessor integration.
When you are editing your Asciidoc files with Jamal preprocessing in IntelliJ or in some other WYSIWYG editor configured to use Jamal then you can use BASIC commands.

This library has one single built-in macro, `basic`.
Using this macro you can embed BASIC programs into your Jamal file.
Usually you will not use the macro directly.
Instead, you can invoke the user-defined macros from the resource file `scriptbasic.jim` as demonstrated in the following example:

{%@comment
The following sample is part of a unit test Java file.
The replaceLines command removes the " characters from the start and the end of the string in the Java source.
%}
{%#snip:define sampleFormatted={%#trimLines
{%#replaceLines replace="""/^\\s*"(.*)(?:\\\\n)".*$/$1/\\\\"/"/\\\\\\\\/\\\\/"""
{%@snip sample%}%}%}%}

[source]
----
{%@snip sampleFormatted%}
----
resulting
{%#snip:define sample_outputFormatted ={%#trimLines
{%#replaceLines replace="""/^\\s*"(.*)(?:\\\\n)".*$/$1/"""
{%@snip sample_output%}%}%}%}
[source]
----
{%@snip sample_outputFormatted%}
----

There is also an include file defining a few user defined macros.
You can refer to this include file, as

[source]
----
{@import res:javax0/jamal/scriptbasic/scriptbasic.jim}
----

in your Jamal file. It will let you write things, like

----
{expr 13+14*55}
----

This will evaluate the expression and result the value of the expression.
For more complex code you can use the macro `basic`, to execute a whole BASIC program and get the output into the Jamal output.

Note that you can also mix Jamal into the BASIC.
It was demonstrated in the example above.
The macro invocation `{\#basic ...}` was using the `#` character, therefore the content is evaluated before it is passed to the built-in macro `basic`.
That way the macros `{start}` and `{end}` are evaluated first.
The BASIC interpreter already gets `for i=1 to 13`.
