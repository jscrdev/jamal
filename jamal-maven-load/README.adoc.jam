= Jamal Maven Load Module

The Jamal Java integration module is an experimental module allowing Jamal source to download Java JAR files from Maven repositories during run-time and load the classes into the running application.

The library's security was designed carefully to balance the ease of use and the security of the application.
Without any security measures, a Jamal file could execute any Java code published online, which is not a good idea.
To prevent this the Jamal installation has to be configured properly to use this module.
The requirements of a proper configuration are described in the section about security.

== Macros

=== `maven:load`

Load the macros from a Maven artifact.
The macro also loads the dependencies of the artifact.
Options can control this behavior.

This macro reads its input and interprets it as a maven coordinate set.
The format has to be

          groupId:artifactId:version

You have to specify all three coordinates.
The macro works in two steps:

1. First, it downloads the artifact JAR and all the dependencies.

2. It loads the macros from the JAR files using a class loader.

It is possible to load only the file without the dependencies using the `noDependencies` option.

WARNING: Loading a JAR file from the internet is a security risk.
You must configure the security appropriately to mitigate this risk.
For more information, see the section about security.

The options are:

* `repositories` (aliases are `repository`, `repo`, `repos`) define the Maven repositories used comma separated.
The values are the repository URLs or symbolic names.
The symbolic names can be
- "central"
- `jcenter-bintray`
- `google-android`
- `google-maven-central-americas`
- `google-maven-central-europe`
- `google-maven-central-asia`
+
The default value is `central`.
When this option is used other than the predefined symbolic names using a full URL it is checked against the configuration.
For more information see the section about security.

* `noDependencies` (alias is `noDeps`) says that the dependencies of the JAR should not be loaded.
The default value is `false`.

* `reload` (aliases are `overwrite`, `update`) says that macros found in the JAR should be reloaded even if they were
already loaded.

* `local` can specify the location of the local Maven repository.
The default value is `~/.m2/repository`.
If this option is used it is checked against the configuration.
For more information see the section about security.

* `exclude` can specify a comma-separated list of maven coordinates that should not be loaded.
This parameter will not stop loading the "root" artifact specified in the macro input.
The coordinates format is the same as in the configuration file for the `maven.load.exclude` property regarding the wildcards.

If the configuration or the security prevents the load, the macro throws an `IllegalStateException`.
It means that the processing will stop.
Also, it is impossible to catch and handle this error using the `{@try ...}` macro.

== Security and Safe Configuration

The macro `maven:load` reads the configuration of Jamal via an API that works only when the configuration is secure.

=== Secure configuration

The configuration is secure if:

* There is no configuration.
In that case, nothing can be opened, so there is no security risk.
However, in this case, the macro will not be able to load any JAR file.

.The configuration directory and the files are _SAFE_
====
* `~/.jamal`, and the files
* `~/.jamal/settings.properties`, and
* `~/.jamal/settings.xml` are _SAFE_
====


.A file or directory is _SAFE_ if
====
* it does not exist, or

* owned by the current user and

* not writable by anyone else, and

* not readable by anyone else,

* not listable (`x` flag) by anyone else.

* In the case of a plain file, it is not executable (`x` flag) by anyone, including the current user.

* It is a plain file when it is supposed to be a file, and it is a directory when it is supposed to be a directory.
====

When reading the configuration, if any of the

* `maven.load.include`

* `maven.load.exclude`

* `maven.load.local`

* `maven.load.repo`

properties point to files, these files should also be _SAFE_.

Securing the configuration is not a must for Jamal's other parts and functionalities, although it is a good practice.
The security is only checked before reading the configuration for the `maven:load` macro.

Also, the `maven:load` macro uses a unique API to read the configuration.
Every time the macro runs, the API rereads the files, checks the security of the configuration, and ignores the in-memory cached configuration.
Also, note that while most of the macros and functionalities of Jamal read configuration via an API that consults

* system properties,

* environment variables, and lastly

* the configuration files,

the API used by the `maven:load` macro reads only the configuration files.

=== Configuration

The `maven:load` macro has to be configured for security reasons.
It can only load JAR files which are explicitly allowed by the configuration.
Also, the remote repositories and the local repository have to be configured unless the hardwired well-known repositories are used with the default local location.

The values for the property keys are

* comma separated list of maven coordinates, absolute paths, or URLs as needed, or

* a file name that contains the list of the same information.

When a key points to a file, the file also has to be _SAFE_ as defined in the previous section.
It has to be in the same directory as the configuration file and has to be specified by the bare name and extension but without any path.
The file contains the configuration information one per line.

==== `maven.load.include`

The configuration should always have the property `maven.load.include` set.
The property gives the list of permitted maven coordinates.

Every maven coordinate has to be in the format

          groupId:artifactId:version

and the `artifactId` and `version` may be a wildcard `*`.
The `groupId` cannot be a wildcard.

If the `artifactId` is a wildcard, then the `version` has to be a wildcard too.

==== `maven.load.exclude`

The key `maven.load.exclude` can be used to exclude some maven coordinates from the list of allowed coordinates.
If a coordinate is excluded, it cannot be used even if it is included in the `maven.load.include` list.

A coordinate will also be skipped if one is present as a dependency.
In this case, however, the download will not stop.
The class loading, however, may still fail if classes are missing because of the exclusion.

==== `maven.load.local`

The key `maven.load.local` can be used to specify the location of the local Maven repository.
It has to be configured when the option `local` used.
The values have to specify the absolute paths of the allowed directories that can be used as local repos.

WARNING: This is a security configuration.
Specifying a location here will not change the default location.

==== `maven.load.repo`

The key `maven.load.repo` can be used to specify the list of allowed remote repositories in addition to the predefined ones.
The values have to be the URLs as they appear in the `repositories` option of the `maven:load` macro.

WARNING: This is a security configuration.
Specifying a URL here will not change the default repository.
