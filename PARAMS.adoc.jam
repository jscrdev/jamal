== Standard Built-In Parameter Parsing
{%@define methodFormat=`$name()`%}\

Even though built-in macros are free to parse their input any way they want, there are support classes that ease this task.
The advantages of using these classes are twofold.

. These classes are thoroughly tested, documented, and easy to use, saving development time and effort.

. The macros are more coherent and easier to understand for the users when they follow similar patterns.

[NOTE]
====
This document describes the format and use of the parameters of the built-in macros using these supporting classes.
====

=== Introduction

Parameters are name-value pairs that modify the behavior of a macro.
For example, the line

[source]
----
{@include [verbatim lines=1..13] otherContent.txt}
----

will instruct Jamal to include the file verbatim and only the lines from 1 to 13.

The Java implementation declares the parameters' names and types, and the helper tool automatically parses the input.
The Java code of the macro gets the values for the parameters parsed and converted.

Parameters can be integer numbers, strings, boolean values, and regular expression patterns.
Some parameters may have multiple values.

Parameters are named and aliased as defined in the Java code.

The parameter parsing can scan the macro content from the start

* to the end,

* to a specific closing character, like a new-line, or

* between special opening and closing characters.

NOTE: The parameters start and end with an opening and closing character.
The macros have opening and closing strings.
Macro parameter parsing uses single characters.
The Java implementation of the macro specifies the actual character.
It is not something you need to change on the Jamal code.

As we have seen, the `input` macro with the parameters

[source]
----
{@include [verbatim lines=1..13] otherContent.txt}
----

uses the `[` and `]` characters.
The built-in core macros use these separator characters.
{%#define nrCoreMacrosUsingParams={%@listDir (grep="(?:Params|Scan).using\\(processor\\).from\\(this\\)" pattern=".*\\.java$" countOnly) ./jamal-core/src/main/java/javax0/jamal/builtins%}%}\
Currently {%nrCoreMacrosUsingParams%} built-in core macros have parameters.

Built-in macros in other packages are encouraged to use the `(` and `)` characters to enclose their parameters.
When the macro does not need content other than the parameters, the recommended way is to use the whole input.
Macros working on several lines, like `trimLines`, usually use the first line of the content for parameters.

The `trimLines` macro in the snippet package can trim vertically if we instruct it.
Similarly, the left trimming can go all to the left, but it may also leave some margin if we specify some margin.
For this reason, this macro uses two parameters:

* `trimVertical`, and

* `margin`.

This macro reserves the first line of the input and trims and returns only the rest of the lines.
The first line can contain parameters.

Other macros parse the whole input for parameters.
The `snip:collect` macro collects snippets from files and does not convert anything from its input.
This macro parses the whole input looking for parameters.
Some macros start parsing for parameters if the first non-whitespace character after the macro id is `(` and the parsing stops at the matching `)`.

The class `{%@java:class javax0.jamal.tools.Params%}` provides the tools to ease parameter parsing.

=== Parameter Sources

When macros need parameters using the support classes, they look at different sources for the values.
First, they look at the macro's input and try to find the parameters.
The parameters are specified in the format

[source,text]
----
name1=value1 name2=value2 ... nameN=valueN
----

The names are the parameter names that the macro may use.

The macro first passes the input to the parsing method.
When a parameter is not defined, the algorithm tries to look up a user-defined macro with the name as the parameter.
If you set `{@define margin=2}` somewhere in your Jamal source, this value will be used by every `trimLine` following it.
The parameter of the same name or a macro defined locally overrides the outer definition.
If the value is not defined as a parameter or a user-defined macro, then the built-in macros can use default values.

NOTE: The macro `default` usually steps into the place of an undefined macro.
When you use an undefined user-defined macro, and Jamal does not find the macro, it uses the macro named `default`, assuming `default` is defined.
In this case, we do not use this macro.
It is also an error if the macro used as the configuration has parameters unless the option `{@options lenient}` is specified.

The parameters have types.

* In the case of boolean parameters, the values `false`, `0`, or `no` are treated as false.
Everything else will result true.
If a required boolean parameter is not present as a parameter, then the option of the same name is taken into account.
The option is the one that you can set using the macro `{@options ...}`.
For example, you can specify `{@options trimVertical}` if you want all uses of the macro `trimLine` to trim vertically.
User-defined macros for a boolean parameter are NOT used.
All boolean options are `false` by default; hence there are no mandatory boolean parameters.
Undefined boolean parameters are `false`.

* Parameters can be strings and integers.
These can be defined in a parameter or as the value of a macro, as described above.

* Some parameters can have more than one value.
The parameter's `name` can appear more than once with multiple values assigned to it.

Macros may decide whether to define any default value for a parameter.
If not, the macro will error if the parameter is not defined and there is no user-defined macro.

The parameter names can have aliases.
These are used solely inside the macro as parameters.
Alias names do not play a role as user-defined macros.
In other words, the "main" name of the parameter can also be a macro; aliases cannot.

The core macro uses `$forsep` as a parameter and has an alias `separator`.
If neither is specified in the macro, only the user-defined macro `$forsep` is used.
If there is a `{@define separator=;}` in the code, it will not alter the execution of the `for` macro.
Inside the macro, however, the names and the aliases are interchangeable.

Macros can define parameters using only aliases.
Technically they specify `null` as the name and give meaningful strings only for one or more aliases.
In that case, there is no way to define a global value for the parameter as a macro.

Aliases are specific to the macro.
Different macros may use the same parameter name for other purposes providing different or the same aliases.
It is up to the macro implementation what parameter names and aliases they use.
However, the parameter names and the aliases are unique in a single macro implementation.

=== Details

In the parameter definition

[source,text]
----
name1=value1 name2=value2 ... nameN=valueN
----

the `value1, value2, ..., valueN` values are either _numeric_, _boolean_ or _string_ values.
The type depends on what the macro awaits for the specific parameter.

You can enclose the values between `"`, `"""` or without any delimiter.
The `"..."` is a typical string representation.
Using the `"` is optional if there is no space or a particular escape sequence in the value.
For example, `margin=1` is just as good as `margin="1"`.
On the other hand, `name=Peter Verhas` is not valid.
It has to be represented as `name="Peter Verhas"` because it contains a space.

A string starting and ending with a `"` character must not contain a new-line character.
If you need multi-line strings, use the `\n` characters or a triple-quoted multi-line string.
A multi-line string starts and ends with `"""`, three quote characters.

Some macros use only the first line for parameters.
Even in this case, the new-line character inside a triple-quoted string is part of the value and does not stop the parsing.
The parsing stops only at the first new-line character, which is not part of any value and not escaped.

If there are many parameters, and the first line becomes too long, then the `\` character escapes the new line.
Subsequent lines can also escape the new-line character using the `\` character.
It makes the parser skip the new line and go on parsing on the following line.

For example

[source,text]
----
{@someMacro header="""
This is the header
text and it is
multi-line
""" paging=true skip="A" skip="DD" skip="3.145" \
comment="this is still a parameter because of the \\ at the end of the previous line"
this is the input the macro will use for its result; everything else until here are parameters
}
----

When the macro asks the parser object to parse the input, it also specifies the parameter names it can handle.
An error will occur if there is any parameter the macro does not handle.

The macro also specifies the type of the parameter.
If Jamal cannot convert the parameter value to the required type, an error will occur.

* Numeric parameters are integers. You can enclose them between `"` or `"""`.

* Boolean parameters are `true` if they are present without any value.
Using the string values `false`, `0`, or `no` will mean a `false` value.
They are `false` if they are not present as a parameter, and the name (not an alias) is also `false` as an option.
A name is `false` as an option if the macro `{@options name}` was not invoked in the current or higher scope or if you invoked the option in the form `{@options ~name}`.
You can set a boolean parameter to `true` by mentioning the name without `=` and any value.
Any value other than that listed for `false` will mean a `true` value.
We recommend using only the name without any value assigned to it.

As you can see in the example, some parameters can have multiple values.
An error will occur if multiple parameters are defined, but the macro accepts only one.
If only one value is defined, but the macro needs a list, it will get a one-element list.
You cannot specify multiple values for such parameters using user-defined macros.
Jamal will not add the global or locally defined user macro to the parameter list if the parameter is specified at least once on the input.
If there are parameters, those values are used; the macro values are ignored.

Single-line and multi-line strings have similar syntax as Java strings.
You can use the same escape sequences.

=== Examples

In this chapter, we list some syntax examples and the use of the parameters.
These examples come from the unit test file

    {%@file ./jamal-test/src/test/java/javax0/jamal/test/tools/params/TestParams.java%}

The display of each example contains a definition line, an _INPUT_ part, and a _RESULT_ part.
The "INPUT" part shows the code that defines the values of the parameters.
It may also contain at the start some `options` or `define` macro in case some parameters get value from this source.
The "RESULT" part shows the calculated value of every parameter.

The definition line contains the parameters' names comma separated.
Each parameter has at least one name.
In case the parameter has an alias that can be used as a parameter name instead of the original name, it is given after a `|` character.
The parameter type is either `I` integer, `S` string, `B` boolean, or `L` list.
The last part following the last `:` is the default value, if there is any.

The test parses this definition string and calls the appropriate `orElse()`, `orElseInt()`, `asString()` and so on methods, which define the type of the parameter.

The RESULT part shows the parameters with the values as `key=value`.
When the returned value is a string, the result is enclosed between quotes.
When the value has some other type, it is shown like a casting operation `(type)` in front of the value.

{%@define section($X)=
==== $X%}

{%@snip:collect from="./jamal-test/src/test/java/javax0/jamal/test/tools/params/TestParams.java"%}
{%@define example($XXX)=
{%#replaceLines replace=/<p>//^\s*\*\s*//
{%@snip head_$XXX%}%}
[source,text]
----
{%#replaceLines replace="/input:/----\nINPUT\n\n[source,text]\n----\n/result:/----\n\nRESULT\n\n[source,text]\n----\n/<p>//"
{%#replaceLines replace=/^\s*"//(\\n)?"\s?\+?$//\\"/"/\\\\/\\/
{%@snip $XXX%}%}
----
%}
{%#replaceLines replace=/<p>//^\s*\*\s*//
{%@snip doc_$XXX%}%}%}
{%@comment
Get the snippets that are in the file `TestParams.java`.
Get only those that do not contain a `_` character in the name.
The snippets are named `header_testMethodName`, `testMethodName`, and `doc_testMethodName` for the three parts for each example.

We use # in the 'for' loop because we want the snip:list to be evaluated to get the snippet ids.
After the iteration, we want to evaluate the 'example' macros, protected by a ` back-tick.
After Jamal evaluated them, we evaluate the result as the snippets may also use macros, like 'section'.
%}
{%!!#for $snippet in ({%@snip:list file="TestParams.java" name="^[^_]+$"%})=
{%`example $snippet%}
%}
