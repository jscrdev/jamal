= Jamal Ruby integration module
{%@import readmemacros.jim%}\
{%@snip:collect from="src/test/java/"%}\
{%@snip:collect from="src/main/java/"%}\
{%@snip:collect from="../jamal-snippet/src/test/java/javax0/jamal/documentation"%}\

{%#counter:define macroChapter {%@define format=$roman. %}%}

Using this integration module you can mix Jamal macro text with Ruby code snippets.
To use this module you have to add the dependency to you Maven project, as:
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>jamal-ruby</artifactId>
    <version>{%VERSION%}</version>
</dependency>

----
 Following that you can use the macros
{%@ruby:property $chapters = 0%}{%@comment count the chapters and then we can use this in the text where we says how mny macros are there%}
{%@define chap($x)=. <<$x,`ruby:$x`>> {%@ruby:import
$chapters++%}%}

{%chap eval%}
{%chap import%}
{%chap shell%}
{%chap property%}
{%chap closer%}{%#define chapNR={%@ruby:eval $chapters%}%}

macros.

== Macros implemented in the package

The macros implemented in this package make it possible to embed Ruby scripts into the Jamal source code.
Ruby is an object-oriented scripting language that has JVM implementation with compelling features.
Using Ruby as a scripting language may be an alternative to using the Java provided and Jamal core integrated JShell.
In some cases, an embedded Ruby script may also serve your purpose instead of writing a Java built-in macro.

In this chapter, we will discuss every macro defined in the package with examples.
The examples are automatically generated into the Asciidoc file, similarly as the samples are generated in the other documentation files.
The difference is that in the case of the main `README.adoc` and the other files, the conversion uses two Java-defined macros.
In this case, these macros are not used.
Instead, Ruby scripts perform the tasks eliminating the need for writing a separate class to implement the functionality for the user-defined macros `sample` and `output`.

The chapter <<Sample,Sample>> describes this process as a non-trivial example for using the Ruby engine.

The package defines {%chapNR%} macros.

The macro `ruby:eval` evaluates a simple expression.
`ruby:import` can import Ruby code.
`ruby:property` can set or get a Ruby variables.
`ruby:shell` can execute more complex Ruby code.
Finally, `ruby:closer` makes it possible to implement closer scripts.

The different macros use Ruby `ScriptingContainer` objects to execute the Ruby scripts.
These container objects are automatically created and named.
{%@define ShellObjects=ShellObjects%}{%@define ShellObjectsTitle=Using Multiple Container Objects%}\
Their use is detailed in the chapter <<{%ShellObjects%},{%ShellObjectsTitle%}>>.
If you do not want to use multiple, separated Ruby containers, you do not need to worry about the container objects.
One will be created upon the first use of one of the Ruby macros and used throughout the Jamal file.

{%@define chap($x)=[[$x]]
==== {%macroChapter%}`ruby:$x`
%}

{%chap eval%}

The macro `ruby:eval` uses its whole input as a ruby expression and evaluates it.
For example the following macro call:
{%sample/
{@ruby:eval 1+1}
%}

will result:

{%output%}

{%chap import%}

This macro can import a Ruby file into the shell.
The macro has two forms:

* `{@ruby:import fileName}`, and

* the format
[source,text]
----
{@ruby:import

}
----

In the first case the named file can be imported.
The name of the file can be relative to the input file that contains the import macro, can be absolute, or can have the prefix `res:` or `https://`.
The file names starting with the prefix `res:` are resource files and have to be available on the classpath.
The files with the prefix https://` are downloaded from the net and are cached.

The name resolution and file access, download and caching is done exactly the same way as in the case of the built-in macro `import`.
For more information about that please read the link:../README.adoc[main readme] file of Jamal.

In the second case, if there are no characters denoting a file name on the first line after the macro name, the content of the macro will be imported.

The content will be evaluated in the shell.
This evaluation tries to create a return value, which is ignored in the case of the `ruby:import` macro.
However, if the content does not have an evaluable return value then the shell will throw an exception.
This exception is hard to ignore, because the Jamal macro implementation cannot comprehend if this is a final value evaluation error or a real Ruby error.
If there is a real Ruby error, then the macros enclose it into a Jamal syntax error and report it that way.

To avoid the final evaluation errors the macro appends a `\n''` string after the Ruby script to be imported.
This will result an empty string, which is, what the macro `ruby:import` results.

Use `ruby:import` if you do not want to include the result of the script into your output or if the script is in a separate Ruby file.

{%chap shell%}

You can execute script using `ruby:shell` and get the result as a string into the Jamal output.
The format of the macro is

[source,text]
----
{@ruby:shell scriptname.rb
script content
}
----

The `scriptname.rb` part is optional.
This name is only used in error reports.
Getting an error message it makes simpler to find which Ruby script fragment was throwing up.
If this part is missing then the name of the actual Ruby shell will be used with an appended `.rb` extension.
Again: this is not a reference to any real file name, it is only for the error messages.
Using `something.rb` is just a reasonable convention that you may like to follow.

The `script content` will be evaluated, and the final result will be the result of the macro.
Use this macro in case your script is longer and not just a simple one liner, in which case you can use the macro `ruby:eval`.

{%chap property%}

This macro sets and gets a Ruby variables.
Ruby containers can communicate with the embedding application, in this case this is Jamal.
The embedding application can set and get variables of the Ruby script.

For example the following sample

{%sample/
{@ruby:property $myProp=(to_i)55}
{@ruby:eval $myProp+45}
%}

and it will result

{%output%}

You can also fetch the value of a variable that was set before by the Ruby script or by the `ruby:property` macro:


{%sample/
{@ruby:eval $yourProp=133}
{@ruby:property $yourProp}
%}

will result

{%output%}

once by the result of the `ruby:eval` and once as the `ruby:property` also fetched this value.

Setting the value you can specify the type of the property.
The possible types are limited to

* `to_i` to convert the value to a Fixnum

* `to_f` to convert to Float

* `to_s` to convert to string.
This happens also if you d not specify conversion.

* `to_r` to convert the string to rational.
In this case the number has to be `X/Y` formatted.

* `to_c` to complex number.
In this case the number has to be `R+Ii` formatted, where `R` and `I` are integer or floating point numbers a `i` is the letter i (lower case).

* `to_c/i` to complex number.
This is the same as `(to_c)` but both the real and the imaginary part of the number has to be integer.


The casting type has to be enclosed between `(` and `)` characters.
The default is to set the property to be a string.
The casting `(to_s)` is available in case you want to emphasize that the value should be handled as a string.
It may also happen that you want to pass a *string* that starts with the characters `(to_i)` or something similar.

Some examples:

{%sample/
{@ruby:property complex=(to_c)66+13i}
{@ruby:eval complex * complex}
%}

will result

{%output%}

{%sample/
{@ruby:property complex=(to_c/i)66+13i}
{@ruby:eval complex * complex}
%}

will result

{%output%}

{%sample/
{@ruby:property ratio=(to_r)66/13}
{@ruby:eval ratio * ratio}
%}

will result

{%output%}

{%chap closer%}

Using the macro `ruby:closer` you can create a so-called closer script.
The script can be used to modify the whole output after the processing of Jamal has finished.

The format of the macro is

[source,text]
----
{@ruby:closer ruby script}
----

The only argument to the macro is the closer Ruby string.
I can be multi-line, and it is executed after the processing of the whole Jamal file has finished.
Before starting the script, the global variable `$result` will be set.
It will contain the result of the Jamal processing.
The content of the global variable `$result` is a Ruby string.

The closer script should result a string that will replace the original result.

You can specify any number of closer scripts using different, or the same Ruby shell.
The scripts will all be invoked one after the other in the order as they were defined in the Jamal source.

{%sample/
Hi, I am the content of the Jamal file.
{@ruby:closer "I do not care what the original text was, replace it with this one."}
I will be killed by the closer.
%}

will result

{%output%}

[[{%ShellObjects%}]]
=== {%ShellObjectsTitle%}
{%#define defaultShellName={%@snip defaultShellName /"(.*)"/%}%}\
{%#define shellNamingMacro={%@snip shellNamingMacro /"(.*)"/%}%}\

If you do not specify any shell object it will be created automatically using the name `{%defaultShellName%}`.

Ruby shell objects are stored along with the user defined macros.
This has two consequences.

* If there is a user defined name with the same name as the Ruby shell name, then the one defined later will overwrite the other.

* The Ruby shell objects are available only within their scopes exactly the same way as user defined objects.
They can also be exported.

Note that the default name starts with `:` therefore this is a global name, available in all scopes.
This is a feature to ease the use of the Ruby shells when you have only one.
It will be created and be available everywhere in the Jamal file even if the first use of Ruby was in a local scope.

The name of the shell can be overwritten defining the user defined macro
`{%shellNamingMacro%}`.

It can be done using the usual built-in macro `define`, as in the example
{%@define myLocalShell=myLocalShell%}
{%#comment
we need this here, to be safe
{%sample/
{@undefine {%shellNamingMacro%}}
%}{%output%}
%}\
{%sample/
{@ruby:eval $z = 13}
{@define {%shellNamingMacro%}={%myLocalShell%}}
{@try! {@ruby:eval $z}}
%}

will result the output:

{%output%}

The reason for this is that the first evaluation is executed in a shell named `{%defaultShellName%}`.
The second evaluation, however runs in a different shell, named `{%myLocalShell%}`.

[NOTE]
====
Note that the `try` macro is used as `{@try...}` and NOT `{#try...}`.
When we want the content of a built-in macro to be evaluated before the macro is invoked we have to use the `#` character.
In case of the `try` macro we want the content to be evaluated, but NOT BEFORE the `try` macro is invoked.
If we use the macro in the form `{#try...}` then the content is evaluated before starting the macro `try`.
If there is any error the macro `try` has no possibility to catch it, because it has not started yet.
On the other hand using `{@try...}` will pass the content unevaluated, and the macro `try` will evaluate it and catch the errors.

This is not Ruby module specific, but it is a very common mistake.
====

There is a resource file named {%#file {%@define fileFormat=`$name`%}{%@define root=src/main/resources/%}ruby.jim%}.
You can import this file and then use the macros defined in it.
The previous example will look the following:

{%#comment
we need this here, because all samples run in the same processor, and the shell was renamed
{%sample/
{@undefine {%shellNamingMacro%}}
%}{%output%}
%}

{%sample/
{@import res:ruby.jim}
{@ruby:eval $z = 13}
{shell={%myLocalShell%}}
{@try! {@ruby:eval $z}}
%}

will result the output:

{%output%}

This is the same as the previous one, not surprisingly.

All Ruby macros are link:../GLOSSARY.adoc[inner scope dependent], which means that you can define the macro `{%shellNamingMacro%}` inside the Ruby macro call.
In that case the definition, following the Jamal rules will be local to the Ruby macro.

For example
{%#comment
we need this here, because all samples run in the same processor, and the shell was renamed
{%sample/
{@undefine {%shellNamingMacro%}}
%}{%output%}
%}

{%sample/
{@import res:ruby.jim}
{@ruby:eval $z = 13}
{@try! {#ruby:eval {shell={%myLocalShell%}}$z}}
{@ruby:eval $z = 13}
%}

will result the output:

{%output%}

The second evaluation is performed in a different shell, but the definition of the shell name is local to the macro `ruby:eval`.
(What is more, it is local to the `try` macro.)

[[Sample]]
=== Sample Application, Converting this `README.adoc`

{%@define $lang=ruby%}
{%@define $Lang=Ruby%}
{%@include ../scriptingReadme.adoc.jim%}

[source,java]
----
{%#trimLines
{%@snip Ruby_Jamal_Doc_Execution
        final var processor = new Processor("{%", "%}");
        final var shell = Shell.getShell(processor, Shell.DEFAULT_RUBY_SHELL_NAME);
        shell.property("$processor", new MyProcessor());
        processor.defineGlobal(shell);
        final var result = processor.process(in);
%}
%}
----
It is almost a standard invocation of the Jamal processor.
The only difference is that it creates a Ruby container using the default container name and injects a Jamal `MyProcessor` instance into the container with the name `$processor`.
When Jamal runs any Ruby code running in the same container will be able to access the processor.

The `MyProcessor` class is an inner class inside the test class and it reads as the following:

[source,java]
----
{%#trimLines
{%@snip MyProcessor
    public static class MyProcessor {
        final Processor processor = new Processor("{", "}");

        public String process(String s) throws BadSyntax {
            return processor.process(Input.makeInput(s));
        }
    }
%}
%}
----

This class is a wrapper, that provides the method `{%@java:method javax0.jamal.ruby.TestConvertRubyReadme$MyProcessor#process%}()` with a string argument.
This can directly be invoked from Ruby.

Using this possibility the user defined macros `sample` and `output` are simply the following:
{%@snip:collect from="readmemacros.jim"%}

* `sample`

[source]
----
{%#replaceLines replace="/^(.*)$/    $1/"
{%@snip Ruby_sample_user_defined_macro%}%}
----

This macro saves the sample code to the global Ruby variable `$lastCode calling the macro `ruby:property`.
The script removes the leading and trailing new line character from the sample if there is any.
Finally, the script returns the resulted string, which is placed between the Asciidoc code display.

* `output`

[source]
----
{%#replaceLines replace="/^(.*)$/    $1/"
{%@snip Ruby_output_user_defined_macro%}%}
----

This macro uses the saved property `lastCode` to access to the text of the last sample.
It invokes the processor to process it.
The result value of the macro is the output of the processor.

In this chapter we discussed how documentations should be "programs" to avoid redundacy in the source and to support consistency.
After that we made a short detour discussing the Jamal snippets, which have a full documentation in the file link:{%@file ../jamal-snippet/README.adoc%}[Snippet README].
We also discussed how the documentation conversion works with snippets and Jamal samples in the Snippet module.
Finally, we had a look at how simpler it is using the Ruby integration.

NOTE: None of the sample codes in the source `README.adoc.jam` was manually copied.

This clearly demonstrates the power and flexibility of Jamal enhanced with the Ruby integration.
If you like the idea, but Ruby is not your favourite scripting language have a look at the link:{%@file ../jamal-groovy/README.adoc%}[Ruby Integration] documentation and give it a try.

{%@snip:update%}
