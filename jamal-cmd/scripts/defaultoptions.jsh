import java.io.File;
import java.io.FileOutputStream;
import java.nio.charset.StandardCharsets;

    if (!options.exists()) {
        try (FileOutputStream fos = new FileOutputStream(options)) {
            fos.write(("#\n" +
                "# This is a jamal.options file.\n" +
                "#\n" +
                "# Use this file to define the options for the Jamal executions started from JShell.\n" +
                "# When this file is generated by jamal.jsh it contains the default values.\n" +
                "# It is the same as having an empty jama.options file or not having that file at all in the current working directory.\n" +
                "#\n" +
                "# Syntax:\n" +
                "# 1.) Every line starting with a # character is a comment\n" +
                "# 2.) Empty lines are ignored\n" +
                "# 3.) syntax of an option line is \"key value\"\n" +
                "#     The key and the value are separated by one or more space\n" +
                "#     Spaces from the start and from the end of the key and the value are chopped off (trimmed)\n" +
                "# 4.) Option keys 'jar' and 'cp' can appear many times\n" +
                "# 5.) Other option keys can appear tero or one time\n" +
                "#\n" +
                "# Use 'jar' to define the URL of a jar file that needs to be on the classpath\n" +
                "# The script will download these to the './.jamal/cache/.jar/' directory and start jamal including these files into  the classpath\n" +
                "# Note that the extensions are not loaded by default\n"+
                "# If you want to use some extension macro then you have to uncomment this line\n"+
                "# jar https://github.com/verhas/jamal/blob/master/release-1.2.0/05extensions/jamal-extensions-1.2.0.jar?raw=true\n" +
                "#\n"+
                "# Use 'cp' to add local JAR files or directories to the classpath\n"+
                "# cp ./target/classes" +
                "\n" +
                "# 'pattern' is a regular expression to select the files that are to be processed by Jamal\n" +
                "# only the files that have the pattern in their name will be processed\n" +
                "pattern .*\\.jam$\n" +
                "# 'exclude' is a regular expression to exclude files from being processed\n" +
                "# files that have the pattern in their name will not be processed even if the 'pattern' matches\n" +
                "exclude\n" +
                "\n" +
                "# 'to' and 'from' control hov the name of the output is calculated from the input\n" +
                "# when a file is processed the name of the file will be transformed using replaceAll(from,to)\n" +
                "# 'from' is a regular expression, 'to' is a string\n" +
                "# the default is to chop off the '.jam' extension from the end of the file name, so for example\n" +
                "# 'pom.xml.jam' will produce 'pom.xml'\n" +
                "to\n" +
                "from \\.jam$\n" +
                "\n" +
                "# 'open' and 'close' define the macro opening and closing strings\n" +
                "open {\n" +
                "close }\n" +
                "\n" +
                "# 'source' defines the source directory\n" +
                "# the files in this directory and in the directories below it recursively will be processed\n" +
                "source .\n" +
                "# 'target' is the target directory. The output files will be created in this directory recreating the directory\n" +
                "# structure of the processed source files.\n" +
                "target .\n").getBytes(StandardCharsets.UTF_8));
        }
    }