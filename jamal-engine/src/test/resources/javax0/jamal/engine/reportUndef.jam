{@comment this file contains some somples where we use the ? character on user defined macros together with ` and !}\
{@define defined=defined}\
{@define macro={defined}}\
{@define fine=fine}\
{?defined} is defined
{defined} is also defined
"{?undefined}" is empty string because `undefined` is not defined
"{`?undefined}" the the literal {@sep ( )}"{?undefined}"(@sep) string because it has a ` in front of the ?
"{?!undefined}" is empty string because `!undefined` is not defined
"{?`undefined}" is empty string because '`undefined' is not defined
"{!?undefined}" is empty string because 'undefined' is not defined and empty string evaluates to empty string
"{@verbatim macro}" is {@sep ( )}"{defined}"(@sep)
"{@try! {!@verbatim macro}}" is error message
"{`@verbatim macro}" is {@sep ( )}"{@verbatim macro}"(@sep)
"{@try! {@verbatim `macro}}" is error message because `macro is not defined
"{@try {@verbatim `macro}}" is empty string
"{@try? {@verbatim `macro}}" is "false" because it failed
"{@try? }" is "true" because nothing just evaluates fine
"{@verbatim ?`macro}" is empty string, because we use ? in front of the macro name
"{@try {@sep [ ]} [this is not terminated}" is empty string because of non-terminated macro, [@sep]but here we are {fine}

