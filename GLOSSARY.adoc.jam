== Jamal Glossary

{%@comment This is the ASCIIDOC version of the GLOSSARY document.
The source of the file is the GLOSSARY.adoc.jam.
This file is processed by the test javax0.jamal.documentation.TestConvertReadme in the module jamal-snippet.

%}{%@import readmemacros.jim%}\
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

This glossary collects the terminologies that we use in Jamal.

Macro Start String:: The string that starts a macro.
It is usually a single character `{`, but it can be any character length.
When Jamal is embedded it is defined as the Jamal processor is created.
The string, along with the __Macro Closing String__ can dynamically be redefined using the __core__ __built-in__ macro `sep`.

Macro End String:: The string that ends a macro.
It is usually a single character `}` usually, but it can be any character length.
When Jamal is embedded it has to be defined when the Jamal processor is created.
The string, along with the __Macro Start String__ can dynamically be redefined using the __core__ __built-in__ macro `sep`.

Built-in Macro:: A built-in macro is a macro, which is implemented in Java.
The built-in macro is the opposite of a __user-defined__ macro.
Built-in macros are defined in the __core__ package of Jamal and in other packages.

User Defined Macro:: A macro, which is defined using Jamal macro source.
The most common user defined macro is created using the built-in core (see *Core*) macro `define`.
A user defined macro defined using `define` inside Jamal is an instance of the class {%@java:class (format=`$name`) javax0.jamal.engine.UserDefinedMacro%}.
This class implements the interface {%@java:class (format=`$name`) javax0.jamal.api.UserDefinedMacro%}.
Any class implementing this interface can be a user defined macro.
The major difference between the implementation of built-in macros and user defined macros that built-in macros are service objects, user defined macro classes are not.
For each built-in macro class there is usually only one instance per processor and these instances are supposed to be state less.
User defined macro classes are instantiated many time and may contain state.
The instance of the class {%@java:class (format=`$name`) javax0.jamal.engine.UserDefinedMacro%} is created by the built in macro `define`.
Other built-in macros can create instances of different classes, so long as long they implement the {%@java:class (format=`$name`) javax0.jamal.api.UserDefinedMacro%} interface.

Core:: The core package defines __built-in__ macros, which are essential for the use of Jamal.
Some of these macros are directly tied to the source parsing process.
For example the macro `escape` and `verbatim` cannot be redefined.
(`escape` relies on a special parsing implemented into the execution __engine__ of Jamal.
Note: this is not true any more, since the method {%@java:method (format="`$name`()")javax0.jamal.api.Macro#fetch%} was introduced in the interface {%@java:class (format=`$name`)javax0.jamal.api.Macro%}.)
`verbatim` is implemented in the __engine__ itself, and that way it only looks like as a macro.

Engine:: Engine is the Java module and program code that executes the Jamal processor.

Scope:: When Jamal executes macros have a certain scope of validity.
For example including a file into a Jamal macro source will process that file in a new scope.
This new scope is inside the scope of the file that includes the other.
The Jamal code can use the macro definitions that are in the current scope or in any upper scope.
When a scope ends the definitions that belong to the scope became stale and not usable any more.
It is not possible to reopen a closed scope.
When a scope ends the next scope above it will become the actual scope.
Scopes are stacked into each other.
A scope can be

* *active* the scope that is currently active.
All macro definitions are created in this scope.

* *locked* when the macros in the scope are available, but new macros are already defined in the scope above.
A scope gets into the locked state when the scope was created to evaluate the parameters of a user defined macro.
The macros defined here are also available for the evaluation of the macro itself, but any new macro definition will go to the scope above.

* *ended* when the scope has ended, the references to any macro are deleted and will be GC-ed.

* *export* scope is the scope one level above the current scope.
When a macro defined in the _active_ scope is exported, the macro is moved to this scope.

* *global* is the top level scope.
It is opened automatically when the processor starts.
Global macros are defined in this scope.

{%@define classFormat=`$name`%}{%@define methodFormat=`$name()`%}\

Inner Scope Dependent:: A built-in macro is inner scope dependent if it has to execute in the scope that was opened when the evaluation of the parameter of the macro started.
Inner scope dependent built-in macros have to implement the interface {%@java:class javax0.jamal.api.InnerScopeDependent%}.
Inner scope dependent macros can define user defined macros, but the scope of these macros ends when the method {%@java:method javax0.jamal.api.Macro::evaluate%} returns.
If an inner scope dependent built-in macro wants to define a macro, which is usable in the scope where the macro is used, it has to export the user defined macro.

Closer:: Is an instance of a class implementing the `AutoCloseable` interface and registered in the processor calling {%@java:method javax0.jamal.api.Processor#deferredClose%}.
This object has to be registered into the processor object during the execution of Jamal.
This can be done by some built-in macros.
The processor invokes the method `close()` when the processing of the Jamal input has finished.
The closer class may also implement {%@java:class javax0.jamal.api.Closer$ProcessorAware%} or {%@java:class javax0.jamal.api.Closer$OutputAware%} interfaces.
This will make the processor inject the processor object or the result into the closer object before invoking `close()`.
This way a closer can modify the final output after all the Jamal macro processing was finished.

Accidental Snippet:: An Accidental Snippet is a snippet in some file that starts in a line containing the characters `snippet` followed by an identifier, but which was not meant to be a snippet.
For example some comments may mention something like `a snippet is...`.
In this case the snippet collection will recognize the snippet start and the identifier for the snippet will be `is`.
Accidental snippets are better avoided, and it is almost always possible.
If it cannot be avoided then you should use different snippet start and end regular expressions.
You can define these as parameters to the `snip:collect` macro.

Maco Input:: The input of a macro is the text that follows the macro name and lasts to the macro end string.
For example the `{@trimLine {%@define TITMI=this is the macro input%}{%TITMI%}}` has the text `{%TITMI%}` as macro input.
