{"version":3,"sources":["utils/GlobalState.ts","utils/NewLineDisplay.ts","components/Input.tsx","components/TabPanel.tsx","components/SimpleTextInput.tsx","Constants.ts","components/TitleBar.tsx","utils/VersionFetcher.tsx","components/BuiltInMacrosDisplay.tsx","components/UserDefinedMacrosDisplay.tsx","utils/Debug.tsx","utils/LoadSource.tsx","utils/DebugCommands.ts","components/Button.tsx","components/LevelDisplay.tsx","components/SimpleTextOutput.tsx","components/EvaluateOutput.tsx","components/ErrorsDisplay.tsx","App.tsx","index.tsx"],"names":["state","initState","init","loopUseState","useState","key","charAt","toUpperCase","slice","showNewLine","s","showP","replaceAll","convertToJSX","color","length","lines","split","map","line","style","Input","text","macro","start","indexOf","end","startText","substr","middleText","endText","overflow","className","TabPanel","children","hidden","id","other","role","SimpleTextInput","caption","reference","backgroundColor","height","ref","width","defaultValue","onChange","RUN_WAIT","DISCONNECTED","BEFORE","AFTER","RUN","TitleBar","message","icon","useMemo","Toolbar","Grid","container","direction","alignItems","justify","item","Typography","variant","fontSize","versionFetcher","url","lastRelease","axios","get","this","then","response","data","search","substring","getVersionMessage","versionMessage","serverVersion","packageJson","version","BuiltInMacrosDisplay","j","i","marginTop","overflowY","Table","celled","size","sortable","striped","Header","Row","HeaderCell","Body","macros","Cell","UserDefinedMacrosDisplay","captionSetter","contentSetter","rows","userDefined","scopes","push","name","params","parameters","join","content","rowNr","onClick","row","warning","undefined","overflowX","type","Debug","host","port","connection","post","command","run","breakpoints","step","stepInto","stepOut","quit","execute","code","all","queryParams","debug","qs","queryString","parse","window","location","URL","href","loadSource","level","inputBeforeArray","inputBefore","outputArray","output","setInputBeforeArray","setOutputArray","setDisplayedLevel","setInputBefore","setInputAfter","input","setMacro","processing","setOutput","setStateMessage","setLevel","setServerVersion","lastErrors","errors","wasErrorAlerted","isan","alert","setWasErrorAlerted","setErrors","setData","catch","err","status","setTimeout","stateMessage","confirm","reload","postAndReload","x","postDoubleAndReload","fetch","Button","disabled","LevelDisplay","errorClass","display","flexDirection","justifyContent","displayedLevel","SimpleTextOutput","textConverted","readOnly","value","EvaluateOutput","Paper","resultCaption","evalOutput","ErrorsDisplay","error","verticalAlign","App","inputAfter","savedEvalOutput","savedResultCaption","currentTabStop","useEffect","document","title","input2Evaluate","useRef","debugButtons","alignContent","setShowP","evalBreakpoints","current","commandRowDisplay","xs","builtInMacroList","userDefinedMacroList","setResultCaption","setEvalOutput","runInput","marginLeft","fontWeight","runOutput","evaluateInput","breakPointsInput","errorsOutput","spacing","Tabs","event","newTabStop","setCurrentTabStop","setSavedEvalOutput","setSavedResultCaption","centered","indicatorColor","Tab","label","evalInput","trace","evaluate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e091f614.chunk.js","sourcesContent":["import {useState} from \"react\";\n\n/**\n * Using this function you can manage the state variables. Upon calling you have to provide a record with the keys and\n * the initial values. The return value is a record that contains all the state variables as fields and also all\n * setXXX functions.\n *\n * @param init the record with the initial values\n */\n\nexport let state: { [x: string]: any } = {};\n\nconst initState = (init: { [key: string]: any }) => {\n    const loopUseState = useState; // or else the linter screams and fails\n    for (let key in init) {\n        [state[key], state[\"set\" + key.charAt(0).toUpperCase() + key.slice(1)]] = loopUseState(init[key]);\n    }\n    return state;\n}\n\n\nexport default initState;","import {state} from \"./GlobalState\"\n\nconst showNewLine = (s: string) => {\n    if (state.showP) {\n        return s.replaceAll(\"\\n\", \"\\u00b6\\n\");\n    } else {\n        return s;\n    }\n}\n\nexport default showNewLine;","import React, {FC} from \"react\";\nimport \"./Input.css\";\nimport showNewLine from \"../utils/NewLineDisplay\";\n\ntype InputProps = {\n    text: string;\n    macro?: string;\n};\n\nconst convertToJSX = (s: string, color: string) => {\n    if (s.length === 0) {\n        return <></>;\n    }\n    let lines = s.split(\"\\n\");\n    return <>\n        {lines.slice(0, -1).map(line => <span style={{color: color}}>{line}<br/></span>)}\n        <span style={{color: color}}>{lines[lines.length - 1]}</span>\n    </>;\n};\n\nconst Input: FC<InputProps> = ({text, macro = \"\"}) => {\n    const start = text.indexOf(macro);\n    const end = start + macro.length;\n    const startText = showNewLine(start === -1 ? text : text.substr(0, start));\n    const middleText = showNewLine(start === -1 ? \"\" : macro);\n    const endText = showNewLine(start === -1 ? \"\" : text.substr(end));\n\n    return (\n        <div style={{overflow: \"auto\"}} className=\"Input_SourceCode\">\n            {convertToJSX(startText, \"black\")}\n            {convertToJSX(middleText, \"red\")}\n            {convertToJSX(endText, \"black\")}\n        </div>\n    );\n};\n\nexport default Input;\n","import React, {FC} from \"react\";\n\ntype TabPanelProps = {\n  children: any;\n  hidden: boolean;\n  id: string;\n  other: any;\n};\n\nconst TabPanel: FC<TabPanelProps> = ({ children, hidden, id, other=\"\" }) => {\n  return (\n    <div role=\"tabpanel\" hidden={hidden} id={id} {...other}>\n      {children}\n    </div>\n  );\n};\nexport default TabPanel;\n","import React, {FC} from \"react\";\nimport \"./SimpleText.css\";\n\ntype SimpleTextInputProps = {\n    caption: string;\n    reference: any;\n    backgroundColor?: string;\n    height?: number;\n};\n\nconst SimpleTextInput: FC<SimpleTextInputProps> = ({\n                                                       caption,\n                                                       reference,\n                                                       backgroundColor = \"white\",\n                                                       height = 260\n                                                   }) => {\n    return (\n        <div className=\"SimpleTextInput_Caption\" style={{backgroundColor: backgroundColor}}>\n            <div className=\"textbox_caption\" style={{backgroundColor: backgroundColor}}>{caption}</div>\n            <textarea className=\"SimpleTextInput_TextArea\" ref={reference}\n                      style={{backgroundColor: backgroundColor, width: \"99%\", height}}\n                      defaultValue=\"\" onChange={() => {\n            }}/>\n        </div>\n    );\n};\n\nexport default SimpleTextInput;\n","\n// the number of milliseconds to wait before asking the server again when the server says that the code is running\nexport const RUN_WAIT = 500;\n\n// the HTTP response code that the server uses when it cannot answer the request because the code is running\nexport const RUN_RESPONSE_CODE = 503; // service unavailable\n\nexport const DISCONNECTED = \"DISCONNECTED\";\nexport const BEFORE = \"BEFORE\";\nexport const AFTER = \"AFTER\";\nexport const RUN = \"RUN\";\nexport const REFRESH_MESSAGE_DELAY = 5000;","import React, {FC, useMemo} from \"react\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Disconnect from \"@material-ui/icons/WifiOff\";\nimport Before from \"@material-ui/icons/PauseCircleOutline\";\nimport After from \"@material-ui/icons/CheckCircle\";\nimport Run from \"@material-ui/icons/DirectionsRun\";\nimport UnknownStatus from \"@material-ui/icons/TextRotationNone\";\nimport {AFTER, BEFORE, DISCONNECTED, RUN} from \"../Constants\";\nimport \"./TitleBar.css\";\n\ntype TitleBarProps = {\n    message: string;\n};\n\nconst TitleBar: FC<TitleBarProps> = ({message}) => {\n    const icon = useMemo(() => {\n        switch (message) {\n            case BEFORE:\n                return <Before/>;\n            case AFTER:\n                return <After/>;\n            case DISCONNECTED:\n                return <Disconnect/>;\n            case RUN:\n                return <Run/>;\n            default:\n                return <UnknownStatus/>;\n        }\n    }, [message]);\n\n    return (\n        <Toolbar className=\"TitleBar\">\n            <Grid\n                container\n                direction=\"row\"\n                alignItems=\"flex-start\"\n                justify=\"space-between\"\n            >\n                <Grid item>\n                    &nbsp;\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" className=\"title\">\n                        Jamal Debug\n                    </Typography>\n                </Grid>\n                <Grid item><span style={{fontSize: \"8pt\"}}>{message}&nbsp;</span>{icon}</Grid>\n            </Grid>\n        </Toolbar>\n    );\n};\n\nexport default TitleBar;\n","import axios from \"axios\";\nimport packageJson from \"../../package.json\";\nimport {state} from \"./GlobalState\"\n\n/**\n * This singleton fetches the version string from GitHub. This way the application can know in the footer the\n * available latest version of the application. The latest version is what appears in the file version.jim\n * declaring the macro LATEST_VERSION.\n */\nclass VersionFetcher {\n    url: string =\n        \"https://raw.githubusercontent.com/verhas/jamal/master/version.jim\";\n    lastRelease: string = \"\";\n\n    constructor() {\n        axios.get(this.url).then((response) => {\n            for (let s of (\"\" + response.data).split(\"\\n\")) {\n                if (s.search(/{@define\\sLAST_RELEASE=(.*)}/) === 0) {\n                    this.lastRelease = s.substring(22, s.length - 1);\n                }\n            }\n        });\n    }\n}\n\n/**\n * A singleton instance. When created it fetches the version string and stores in the `lastRelease` property.\n */\nconst versionFetcher = new VersionFetcher();\n\n/**\n * Calculate the version message for the footer. This message displays the version of the debugger UI, the version of\n * the server it is connecting to and also the latest version.\n */\nconst getVersionMessage = (): string => {\n    let versionMessage;\n    if (state.serverVersion === packageJson.version) {\n        versionMessage = \"Version: \" + state.serverVersion;\n    } else {\n        versionMessage =\n            \"Server version: \" +\n            state.serverVersion +\n            \", Client version: \" +\n            packageJson.version;\n    }\n\n    if (\n        versionFetcher.lastRelease !== \"\" &&\n        (versionFetcher.lastRelease !== state.serverVersion || versionFetcher.lastRelease !== packageJson.version)\n    ) {\n        versionMessage += \", Latest release: \" + versionFetcher.lastRelease;\n    }\n    return versionMessage;\n}\n\nexport default getVersionMessage;\n","import React, {FC} from \"react\";\nimport \"./BuiltInMacrosDisplay.css\";\nimport {Table} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport type Data from '../server/Data'\n\ntype BuiltInMacrosDisplayProps = {\n    data: Data\n};\n\nconst BuiltInMacrosDisplay: FC<BuiltInMacrosDisplayProps> = ({data}) => {\n\n    let j = 0;\n    let i = 0;\n    return (\n        <div style={{height: \"310px\"}}>\n\n            <div style={{\n                height: \"620px\",\n                width: \"100%\",\n                marginTop: \"10px\",\n                overflowY: \"auto\",\n                backgroundColor: \"lightyellow\"\n            }}>\n                <Table celled size=\"small\" sortable striped\n                       style={{fontSize: \"12px\", backgroundColor: \"lightyellow\"}}>\n                    <Table.Header>\n                        <Table.Row key={0}>\n                            <Table.HeaderCell style={{width: \"30px\"}}>n</Table.HeaderCell>\n                            <Table.HeaderCell style={{width: \"30px\"}}>L</Table.HeaderCell>\n                            <Table.HeaderCell style={{width: \"100px\"}}>macro</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {(data?.macros?.macros || []).map((macros: { [key: string]: any }) => {\n                                i++;\n                                return macros.macros.map((macro: { [key: string]: any }) => {\n                                        j++;\n                                        return <Table.Row key={j}>\n                                            <Table.Cell style={{width: 30}}>{j}</Table.Cell>\n                                            <Table.Cell style={{width: 30}}>{i}</Table.Cell>\n                                            <Table.Cell style={{width: \"100%\"}}>{macro}</Table.Cell>\n                                        </Table.Row>;\n                                    }\n                                );\n                            }\n                        )}\n                    </Table.Body>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport default BuiltInMacrosDisplay;\n","import React, {FC} from \"react\";\nimport \"./UserDefinedMacrosDisplay.css\";\nimport {Table} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport type Data from '../server/Data';\nimport type { UserDefinedMacro } from '../server/Data';\n\ntype UserDefinedMacrosDisplayProps = {\n    data: Data;\n    captionSetter: (caption: string) => void;\n    contentSetter: (caption: string) => void;\n};\n\ntype Macro = {\n    name: string;\n    params: string;\n    content?: string\n}\n\nconst UserDefinedMacrosDisplay: FC<UserDefinedMacrosDisplayProps> = ({\n                                                                         data, captionSetter, contentSetter\n                                                                     }) => {\n\n    const rows: Macro[] = [];\n\n    for (let macros of data.userDefined?.scopes || []) {\n        for (let macro of macros || []) {\n            rows.push({\n                name: macro.id,\n                params: macro.parameters?.join(\",\") ?? \"\",\n                content: macro.content,\n            });\n        }\n    }\n\n    let j = 0;\n    let i = 0;\n    return (\n        <div style={{height: \"310px\", width: \"100%\", marginTop: \"10px\", overflowY: \"auto\", backgroundColor: \"#d2eaff\"}}>\n            <Table celled size=\"small\" sortable striped style={{fontSize: \"12px\", backgroundColor: \"#d2eaff\"}}>\n                <Table.Header>\n                    <Table.Row key={0}>\n                        <Table.HeaderCell>n</Table.HeaderCell>\n                        <Table.HeaderCell>L</Table.HeaderCell>\n                        <Table.HeaderCell>macro</Table.HeaderCell>\n                        <Table.HeaderCell>parameters</Table.HeaderCell>\n                        <Table.HeaderCell>body</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {(data?.userDefined?.scopes || []).map((macros: { [key: string]: any }) => {\n                            i++;\n                            return macros.map((macro: UserDefinedMacro) => {\n                                    j++;\n                                    return <Table.Row key={j} onClick={((rowNr: number) => () => {\n                                        const row = rows[rowNr];\n                                        const text = \"{@define \" + row.name + \"(\" + row.params + \")=\" + row.content + \"}\";\n                                        captionSetter(\"macro definition\");\n                                        contentSetter(text);\n                                    })(j - 1)} warning={macro.content === undefined}>\n                                        <Table.Cell style={{width: 30}}>{j}</Table.Cell>\n                                        <Table.Cell style={{width: 30}}>{i}</Table.Cell>\n                                        <Table.Cell style={{width: 100}}>{macro.id}</Table.Cell>\n                                        <Table.Cell style={{\n                                            width: 200,\n                                            overflowX: \"auto\"\n                                        }}>{macro?.parameters?.join(\",\") ?? \"\"}</Table.Cell>\n                                        <Table.Cell style={{width: \"100%\"}}>{macro.content !== undefined ? macro.content : macro.type}</Table.Cell>\n                                    </Table.Row>;\n                                }\n                            );\n                        }\n                    )}\n                </Table.Body>\n            </Table>\n        </div>\n    );\n};\n\nexport default UserDefinedMacrosDisplay;\n","import axios from \"axios\";\nimport queryString from \"querystring\";\n\n/**\n * Implement communication with the Jamal debug server via HTTP GET and POST requests.\n * The class has methods for each command in addition to post() and get().\n */\nclass Debug {\n  port: number = 8080;\n  host: string = \"localhost\";\n\n  /**\n   * The constructor should specify the default host and post number.\n   * Later the host and the port number can be changed.\n   *\n   * @param {string} host\n   * @param {string} port\n   * @constructor\n   */\n  constructor(host: string, port: number = 8080) {\n    this.host = host; \n    this.port = port;\n  }\n\n  connection= (): string => {\n    return \"http://\" + this.host + \":\" + this.port;\n  }\n\n  post = (command: string, data='') => {\n    return axios.post(this.connection() + command, data);\n  }\n  \n  get = (command: string) => {\n    return axios.get(this.connection() + command);\n  }\n\n  run = (breakpoints:string) => this.post(\"/run\",breakpoints);\n  step = () => this.post(\"/step\");\n  stepInto = () => this.post(\"/stepInto\");\n  stepOut = () => this.post(\"/stepOut\");\n  quit = () => this.post(\"/quit\");\n  execute = (code: string) => this.post(\"/execute\", code);\n  all = (queryParams: string) => this.get(\"/all?\" + queryParams);\n}\n\nconst debug = new Debug(\"localhost\", 8080);\n\nconst qs = queryString.parse(window.location.search.substring(1));\n\nconst port: string = qs.port\n    ? \"\" + qs.port\n    : new URL(window.location.href).port;\n\ndebug.port = +port;\n\nexport default debug;\n","import debug from \"./Debug\";\nimport {AxiosError, AxiosResponse} from \"axios\";\nimport {state} from \"./GlobalState\";\nimport type Data from '../server/Data';\nimport {DISCONNECTED, REFRESH_MESSAGE_DELAY, RUN, RUN_RESPONSE_CODE, RUN_WAIT} from \"../Constants\";\n\nconst loadSource = () => {\n    debug.all(\"level&errors&input&output&inputBefore&processing&macros&userDefined&state&output&version\")\n        .then((response: AxiosResponse<Data>) => {\n            const data = response.data\n            if (data) {\n                const level = +(data.level);\n\n                const inputBeforeArray = state.inputBeforeArray.slice(0, level - 1);\n                inputBeforeArray.push(data.inputBefore);\n\n                const outputArray = state.outputArray.slice(0, level - 1);\n                outputArray[level - 1] = data.output;\n\n                state.setInputBeforeArray(inputBeforeArray);\n                state.setOutputArray(outputArray);\n\n                state.setDisplayedLevel(level);\n                state.setInputBefore(data.inputBefore ?? \"\");\n                state.setInputAfter(data.input ?? \"\");\n                state.setMacro(data.processing ?? \"\");\n                state.setOutput(data.output ?? \"\");\n                state.setStateMessage(data.state ?? \"\");\n                state.setLevel(data.level ?? \"\");\n                state.setServerVersion(data.version?.version ?? \"unknown\");\n                const lastErrors = data.errors ?? [];\n                if (!state.errors.length && lastErrors.length && !state.wasErrorAlerted) {\n                    let [isan, s]: [string, string] =\n                        lastErrors.length === 1 ? [\"is an\", ''] : [`are ${lastErrors.length}`, 's'];\n                    alert(`There ${isan} error${s} in the Jamal source.\\n\\n`\n                        + lastErrors.join(\"\\n\")\n                        + \"\\n\\n\"\n                        + \"This is a one time only alert. When there is an error \"\n                        + \"the 'ERROR' tab is visible and the level counter is red.\");\n                    state.setWasErrorAlerted(true);\n                }\n                state.setErrors(lastErrors);\n                state.setData(data);\n            } else {\n                alert(\"Server response contained no data.\");\n            }\n        })\n        .catch((err: AxiosError<undefined>) => {\n            if (err.response?.status === RUN_RESPONSE_CODE) {\n                state.setStateMessage(RUN);\n                setTimeout(loadSource, RUN_WAIT);\n            } else {\n                state.setStateMessage(DISCONNECTED);\n                state.setInputBefore(\"\");\n                state.setMacro(\"\");\n                state.setOutput(\"\");\n                state.setData({});\n                setTimeout( () =>{\n                    if( state.stateMessage === DISCONNECTED){\n                        const doRefresh = window.confirm(\"Refresh the page to retry connecting to the Jamal debugger server.\\n\" +\n                            \"Refresh now?\");\n                        if( doRefresh ){\n                            window.location.reload();\n                        }\n                    }\n                },REFRESH_MESSAGE_DELAY);\n            }\n        });\n};\n\nexport default loadSource;","import {AxiosError, AxiosResponse} from \"axios\";\nimport loadSource from \"./LoadSource\";\nimport {state} from \"./GlobalState\"\nimport debug from \"./Debug\"\nimport {AFTER, RUN, RUN_RESPONSE_CODE, RUN_WAIT} from \"../Constants\";\n\nconst postAndReload = (x: () => Promise<AxiosResponse>) => {\n    state.setStateMessage(RUN);\n    x().then(loadSource)\n        .catch((err: AxiosError<undefined>) => {\n            if (err.response?.status === RUN_RESPONSE_CODE) {\n                setTimeout(() => postAndReload(x), RUN_WAIT);\n            } else {\n                setTimeout(loadSource, RUN_WAIT);\n            }\n        });\n};\n\nconst postDoubleAndReload = (x: () => Promise<AxiosResponse>) => {\n    if (state.stateMessage !== AFTER) {\n        postAndReload(x);\n        return;\n    }\n    state.setStateMessage(RUN);\n    x().then(\n        () => postAndReload(x)\n    ).catch(\n        (err: AxiosError<undefined>) => {\n            if (err.response?.status === RUN_RESPONSE_CODE) {\n                setTimeout(() => postDoubleAndReload(x), RUN_WAIT);\n            } else {\n                setTimeout(loadSource, RUN_WAIT);\n            }\n        }\n    );\n};\n\nexport const step = () => postDoubleAndReload(debug.step);\nexport const fetch = () => postAndReload(debug.step);\nexport const stepInto = () => postAndReload(debug.stepInto);\nexport const stepOut = () => postAndReload(debug.stepOut);\nexport const quit = () => postAndReload(debug.quit);\nexport const run = (evalBreakpoints: any) =>\n    debug.run(\"\" + evalBreakpoints?.current?.value)\n        .then(loadSource);\nexport const evaluate = (evalInput: any) =>\n    debug.execute(\"\" + evalInput?.current?.value).then((response) => {\n        if (typeof response.data != \"object\") {\n            if (response.data.length === 0) {\n                state.setEvalOutput(\"\");\n                const resultCaption = \"empty evaluation result\";\n                state.setResultCaption(resultCaption);\n                state.setSavedEvalOutput(\"\");\n                state.setSavedResultCaption(resultCaption);\n            } else {\n                const evalOutput = \"\" + response.data;\n                const resultCaption = \"result\";\n                state.setEvalOutput(evalOutput);\n                state.setResultCaption(resultCaption);\n                state.setSavedEvalOutput(evalOutput);\n                state.setSavedResultCaption(resultCaption);\n            }\n            document.title = \"Jamal Debugger\";\n        } else {\n            state.setEvalOutput(\"\" + response?.data?.message + \"\\n\" + response?.data?.trace);\n            state.setResultCaption(\"error result\");\n            document.title = \"Jamal Debugger (e)\";\n        }\n        loadSource();\n    });\n\n","import React, {FC} from \"react\";\nimport \"./LevelDisplay.css\";\nimport {Button as SemanticButton} from \"semantic-ui-react\";\nimport {state} from \"../utils/GlobalState\";\nimport {DISCONNECTED, RUN} from \"../Constants\";\n\ntype ButtonProps = {\n    onClick: any;\n    caption: string;\n    color?: any;\n    disabled?: boolean;\n    style?: any;\n};\n\nconst Button: FC<ButtonProps> = ({onClick, caption, color = \"grey\", disabled = false, children,style={}}) => {\n    return (\n        <>\n            <SemanticButton variant=\"contained\" onClick={onClick} color={color} disabled={disabled || state.stateMessage === RUN || state.stateMessage === DISCONNECTED} style={style}>\n                {children}\n                <div style={{fontSize: \"8pt\"}}>{caption}</div>\n            </SemanticButton>\n        </>\n    );\n};\n\nexport default Button;\n","import {FC} from \"react\";\nimport {state} from \"../utils/GlobalState\"\nimport \"./LevelDisplay.css\";\n\nconst LevelDisplay: FC = () => {\n    let errorClass = \"\";\n    if (state.errors.length) {\n        errorClass = \"RedAsError\"\n    }\n    return <>\n        <div style={{\n\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"left\"\n        }}>\n            <div className={`LevelNumber ${errorClass}`}>{\"\" + state.displayedLevel}</div>\n            <div>\n                <div className={'LevelNumber LevelUpDown LevelUp'} onClick={() => {\n                    if (state.displayedLevel < state.level) {\n                        state.setDisplayedLevel(state.displayedLevel + 1);\n                        state.setInputBefore(state.inputBeforeArray[state.displayedLevel] || '');\n                        state.setOutput(state.outputArray[state.displayedLevel] || '');\n                    }\n                }}><div className={\"LevelUpDownLabel LevelUpLabel\"}>+</div>\n                </div>\n                <div className={'LevelNumber LevelUpDown'} onClick={() => {\n                    if (state.displayedLevel > 1) {\n                        state.setDisplayedLevel(state.displayedLevel - 1);\n                        state.setInputBefore(state.inputBeforeArray[state.displayedLevel - 2] || '');\n                        state.setOutput(state.outputArray[state.displayedLevel - 2] || '');\n                    }\n                }}><div className={\"LevelUpDownLabel\"}>-</div>\n                </div>\n            </div>\n        </div>\n        <div style={{fontSize: \"8pt\"}}>source level</div>\n    </>;\n}\n\nexport default LevelDisplay;","import React, {FC} from \"react\";\nimport \"./SimpleText.css\";\nimport showNewLine from \"../utils/NewLineDisplay\";\n\ntype SimpleTextOutputProps = {\n    children: string;\n    caption: string;\n    color?: string;\n    height?: number\n};\n\nconst SimpleTextOutput: FC<SimpleTextOutputProps> = ({children, caption, color = \"white\", height = 260}) => {\n    const textConverted = showNewLine(\"\" + children);\n    return (\n        <div className=\"SimpleTextInput_Caption\" style={{backgroundColor: color}}>\n            <div className=\"textbox_caption\" style={{backgroundColor: color}}>{caption}</div>\n            <textarea\n                readOnly\n                className=\"SimpleTextInput_TextArea\"\n                value={textConverted}\n                style={{width: \"99%\", backgroundColor: color, height}}\n            />\n        </div>\n    );\n};\n\nexport default SimpleTextOutput;\n","import {FC} from \"react\";\nimport {Paper} from \"@material-ui/core\";\nimport SimpleTextOutput from \"./SimpleTextOutput\";\nimport {state} from \"../utils/GlobalState\"\nimport '../App.css'\n\nconst EvaluateOutput: FC = () => {\n    return (\n        <Paper className=\"App_Paper, App_Eval\">\n            <SimpleTextOutput caption={state.resultCaption}>\n                {state.evalOutput}\n            </SimpleTextOutput>\n        </Paper>\n    );\n}\n\nexport default EvaluateOutput;","import React, {FC} from \"react\";\nimport \"./BuiltInMacrosDisplay.css\";\nimport {Table} from 'semantic-ui-react';\nimport {state} from '../utils/GlobalState';\nimport 'semantic-ui-css/semantic.min.css';\n\ntype ErrorsDisplayProps = {};\n\nconst ErrorsDisplay: FC<ErrorsDisplayProps> = () => {\n\n    const errors = state.errors;\n    let j = 0;\n    return (\n        <div style={{height: \"310px\"}}>\n\n            <div style={{\n                height: \"620px\",\n                width: \"100%\",\n                marginTop: \"10px\",\n                overflowY: \"auto\",\n                backgroundColor: \"whitesmoke\"\n            }}>\n                <Table celled size=\"small\" sortable striped\n                       style={{fontSize: \"12px\", backgroundColor: \"whitesmoke\"}}>\n                    <Table.Header>\n                        <Table.Row key={0}>\n                            <Table.HeaderCell style={{width: \"100px\"}}>Error Message</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {errors.map((error: { [key: string]: any }) => {\n                            j++;\n                            return <Table.Row key={j} >\n                                <Table.Cell style={{width: \"100%\",}} warning verticalAlign=\"top\">{error}</Table.Cell>\n                            </Table.Row>;\n                        })}\n                    </Table.Body>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport default ErrorsDisplay;\n","import React, {useEffect, useRef} from \"react\";\nimport Input from \"./components/Input\";\nimport TabPanel from \"./components/TabPanel\";\nimport SimpleTextInput from \"./components/SimpleTextInput\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Run from \"@material-ui/icons/DirectionsRun\";\nimport Step from \"@material-ui/icons/TextRotationNone\";\nimport Refresh from \"@material-ui/icons/Refresh\";\nimport StepInto from \"@material-ui/icons/TextRotateVertical\";\nimport StepOut from \"@material-ui/icons/TextRotationAngleup\";\nimport Quit from \"@material-ui/icons/ExitToApp\";\nimport TitleBar from \"./components/TitleBar\";\nimport getVersionMessage from \"./utils/VersionFetcher\";\nimport BuiltInMacrosDisplay from \"./components/BuiltInMacrosDisplay\";\nimport UserDefinedMacrosDisplay from \"./components/UserDefinedMacrosDisplay\";\nimport initState, {state} from \"./utils/GlobalState\"\nimport loadSource from \"./utils/LoadSource\";\nimport {evaluate, fetch, quit, run, step, stepInto, stepOut} from \"./utils/DebugCommands\"\nimport Button from \"./components/Button\";\nimport \"./App.css\";\nimport LevelDisplay from \"./components/LevelDisplay\";\nimport EvaluateOutput from \"./components/EvaluateOutput\";\nimport ErrorsDisplay from \"./components/ErrorsDisplay\";\nimport {BEFORE, DISCONNECTED} from \"./Constants\";\n\nconst App = () => {\n\n    initState({\n        data: {},\n        inputBefore: \"\",\n        inputAfter: \"\",\n        inputBeforeArray: [],\n        errors: [],\n        macro: \"\",\n        output: \"\",\n        outputArray: [],\n        level: \"-\",\n        displayedLevel: 0,\n        evalOutput: \"\",\n        savedEvalOutput: \"\",\n        resultCaption: \"no result\",\n        savedResultCaption: \"no result\",\n        showP: true,\n        stateMessage: \"\",\n        serverVersion: \"unknown\",\n        currentTabStop: 0,\n        wasErrorAlerted: false\n    });\n\n    useEffect(() => {\n            document.title = \"Jamal Debugger\";\n            loadSource();\n            // eslint-disable-next-line\n        }, []\n    )\n\n\n    const tabPanelChange = (event: React.ChangeEvent<{}>, newTabStop: number) => {\n        state.setCurrentTabStop(newTabStop);\n        if (newTabStop === 4 && !state?.errors?.length) {\n            state.setCurrentTabStop(state.currentTabStop);\n            return;\n        }\n        if (state.currentTabStop === 2) {\n            state.setSavedEvalOutput(state.evalOutput);\n            state.setSavedResultCaption(state.resultCaption);\n        }\n        if (newTabStop === 1) {\n            state.setResultCaption(\"macro definition\");\n        }\n        if (newTabStop === 2) {\n            state.setEvalOutput(state.savedEvalOutput);\n            state.setResultCaption(state.savedResultCaption);\n        }\n    };\n\n    const input2Evaluate = useRef({value: \"\"});\n    const breakpoints = useRef({value: \"\"});\n\n    const debugButtons = (\n        <Grid container direction=\"column\">\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-around\"\n                alignContent=\"center\"\n            >\n                <Button onClick={() => state.setShowP(!state.showP)}\n                        caption={state.showP ? \"hide\" : \"show\"}>{\"\\u00b6\"}</Button>\n                <Button onClick={loadSource} caption=\"Refresh\"><Refresh/></Button>\n                <Button onClick={() => run(breakpoints)} caption=\"Run\"><Run/></Button>\n                <Button onClick={fetch} caption=\"Fetch\" disabled={state.stateMessage === BEFORE}>{\"{...}\"}</Button>\n                <Button onClick={step} caption=\"Step\"><Step/></Button>\n                <Button onClick={stepInto} caption=\"Step In\"><StepInto/></Button>\n                <Button onClick={stepOut} caption=\"Step out\"><StepOut/></Button>\n            </Grid>\n        </Grid>\n    );\n\n    const commandRowDisplay = (\n        <>\n            <Grid item xs={6}>\n                {debugButtons}\n            </Grid>\n            <Grid item xs={3}>\n                <LevelDisplay/>\n            </Grid>\n            <Grid\n                container\n                direction=\"row\"\n                xs={3}\n                justify=\"space-around\"\n                alignItems=\"flex-end\"\n                alignContent=\"flex-end\"\n            >\n                <Button onClick={quit} caption=\"Quit\" color=\"red\"><Quit/></Button>\n            </Grid>\n        </>\n    );\n\n    const builtInMacroList = (\n        <Paper className=\"App_Paper, App_MacroList\">\n            <BuiltInMacrosDisplay data={state.data}/>\n        </Paper>\n    );\n\n    const userDefinedMacroList = (\n        <Paper className=\"App_Paper, App_MacroList\">\n            <UserDefinedMacrosDisplay\n                data={state.data}\n                captionSetter={state.setResultCaption}\n                contentSetter={state.setEvalOutput}\n            />\n        </Paper>\n    );\n\n    const runInput = (\n        <Grid item xs={6}>\n            <Paper className=\"App_Paper, run_input\">\n                <div style={{marginLeft: \"5px\", fontSize: \"10pt\", fontWeight: \"bold\"}}>{\"input\"}</div>\n                <Input text={state.stateMessage !== BEFORE ? state.inputAfter : state.inputBefore}\n                       macro={state.stateMessage !== BEFORE ? '' : state.macro}/>\n            </Paper>\n        </Grid>\n    );\n\n    const runOutput = (\n        <Paper className=\"App_Paper\">\n            <div style={{marginLeft: \"5px\", fontSize: \"10pt\", fontWeight: \"bold\"}}>{\"output\"}</div>\n            <Input text={state.output}/>\n        </Paper>\n    );\n\n    const evaluateInput = (\n        <Paper className=\"App_Paper, App_Eval\">\n            <SimpleTextInput caption={\"evaluate\"} reference={input2Evaluate}/>\n        </Paper>\n    );\n\n    const breakPointsInput = (\n        <Paper className=\"App_Paper, App_Eval\">\n            <SimpleTextInput caption={\"breakpoints\"} reference={breakpoints} backgroundColor=\"#ffe0e0\" height={585}/>\n        </Paper>\n    );\n    const errorsOutput = (\n        <Paper className=\"App_Paper, App_Eval\">\n            <ErrorsDisplay/>\n        </Paper>\n    );\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Grid container direction=\"row\">\n                    <TitleBar message={state.stateMessage}/>\n                </Grid>\n                <Grid container direction=\"row\">\n                    {commandRowDisplay}\n                </Grid>\n\n                <Grid\n                    container\n                    direction=\"row\"\n                    spacing={2}\n                    style={{width: \"100%\"}}\n                    justify=\"space-around\"\n                >\n                    {runInput}\n\n                    <Grid item xs={6}>\n                        <Tabs\n                            value={state.currentTabStop}\n                            onChange={tabPanelChange}\n                            className=\"tab_panel\"\n                            centered\n                            indicatorColor=\"secondary\"\n                        >\n                            <Tab value={0} label=\"built-in macros\" disabled={state.stateMessage === DISCONNECTED}/>\n                            <Tab value={1} label=\"user defined\" disabled={state.stateMessage === DISCONNECTED}/>\n                            <Tab value={2} label={<>\n                                <Button onClick={() => evaluate(input2Evaluate)} color=\"blue\"\n                                        caption={\"Evaluate\"} disabled={state.currentTabStop !== 2 || state.stateMessage === DISCONNECTED}>{<></>}</Button>\n                            </>} disabled={state.stateMessage === DISCONNECTED}/>\n                            <Tab value={3} label=\"breakpoints\" disabled={state.stateMessage === DISCONNECTED}/>\n                            <Tab value={4}\n                                 label={state?.errors?.length > 0 ? `error${state?.errors?.length === 1 ? '' : 's'} (${state?.errors?.length})` : \"\"}\n                                 disabled={!state?.errors?.length || state.stateMessage === DISCONNECTED}/>\n                        </Tabs>\n                        <TabPanel id=\"0\" hidden={state.currentTabStop !== 0} other=\"\">\n                            {builtInMacroList}\n                        </TabPanel>\n                        <TabPanel id=\"1\" hidden={state.currentTabStop !== 1} other=\"\">\n                            {userDefinedMacroList}\n                        </TabPanel>\n                        <TabPanel id=\"2\" hidden={state.currentTabStop !== 2} other=\"\">\n                            {evaluateInput}\n                        </TabPanel>\n                        <TabPanel id=\"3\" hidden={state.currentTabStop !== 3} other=\"\">\n                            {breakPointsInput}\n                        </TabPanel>\n                        <TabPanel id=\"4\" hidden={state.currentTabStop !== 4} other=\"\">\n                            {errorsOutput}\n                        </TabPanel>\n                    </Grid>\n                </Grid>\n\n                <Grid\n                    container\n                    direction=\"row\"\n                    spacing={2}\n                    style={{width: \"100%\"}}\n                    justify=\"space-around\"\n                >\n                    <Grid item xs={6}>\n                        {runOutput}\n                    </Grid>\n                    <Grid item xs={6}>\n                        {state.currentTabStop === 1 || state.currentTabStop === 2 ?\n                            <EvaluateOutput/> : <></>}\n                    </Grid>\n                </Grid>\n                <Grid\n                    container\n                    direction=\"row\"\n                    spacing={2}\n                    style={{width: \"100%\"}}\n                    justify=\"space-around\"\n                >\n                    <Grid item xs={12}>\n                        <div className=\"App_LicenseLine\">\n                            {\"Peter Verhas 2021, Apache License 2.0, \"}\n                            <a href=\"https://github.com/verhas/jamal\">\n                                {\"https://github.com/verhas/jamal\"}\n                            </a>\n                            {\", \" + getVersionMessage()}\n                        </div>\n                    </Grid>\n                </Grid>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}